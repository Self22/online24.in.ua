{"version":3,"names":[],"mappings":"","sources":["bootstrap.js"],"sourcesContent":["/*!\r\n * Bootstrap v4.0.0-alpha.6 (https://getbootstrap.com)\r\n * Copyright 2011-2017 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)\r\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n */\r\n\r\nif (typeof jQuery === 'undefined') {\r\n    throw new Error('Bootstrap\\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\\'s JavaScript.')\r\n}\r\n\r\n+function ($) {\r\n    var version = $.fn.jquery.split(' ')[0].split('.')\r\n    if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1) || (version[0] >= 4)) {\r\n        throw new Error('Bootstrap\\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0')\r\n    }\r\n}(jQuery);\r\n\r\n\r\n+function () {\r\n\r\n    var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\r\n        return typeof obj;\r\n    } : function (obj) {\r\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\r\n    };\r\n\r\n    var _createClass = function () {\r\n        function defineProperties(target, props) {\r\n            for (var i = 0; i < props.length; i++) {\r\n                var descriptor = props[i];\r\n                descriptor.enumerable = descriptor.enumerable || false;\r\n                descriptor.configurable = true;\r\n                if (\"value\" in descriptor) descriptor.writable = true;\r\n                Object.defineProperty(target, descriptor.key, descriptor);\r\n            }\r\n        }\r\n\r\n        return function (Constructor, protoProps, staticProps) {\r\n            if (protoProps) defineProperties(Constructor.prototype, protoProps);\r\n            if (staticProps) defineProperties(Constructor, staticProps);\r\n            return Constructor;\r\n        };\r\n    }();\r\n\r\n    function _possibleConstructorReturn(self, call) {\r\n        if (!self) {\r\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\r\n        }\r\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\r\n    }\r\n\r\n    function _inherits(subClass, superClass) {\r\n        if (typeof superClass !== \"function\" && superClass !== null) {\r\n            throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\r\n        }\r\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\r\n            constructor: {\r\n                value: subClass,\r\n                enumerable: false,\r\n                writable: true,\r\n                configurable: true\r\n            }\r\n        });\r\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\r\n    }\r\n\r\n    function _classCallCheck(instance, Constructor) {\r\n        if (!(instance instanceof Constructor)) {\r\n            throw new TypeError(\"Cannot call a class as a function\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Bootstrap (v4.0.0-alpha.6): util.js\r\n     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n     * --------------------------------------------------------------------------\r\n     */\r\n\r\n    var Util = function ($) {\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Private TransitionEnd Helpers\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var transition = false;\r\n\r\n        var MAX_UID = 1000000;\r\n\r\n        var TransitionEndEvent = {\r\n            WebkitTransition: 'webkitTransitionEnd',\r\n            MozTransition: 'transitionend',\r\n            OTransition: 'oTransitionEnd otransitionend',\r\n            transition: 'transitionend'\r\n        };\r\n\r\n        // shoutout AngusCroll (https://goo.gl/pxwQGp)\r\n        function toType(obj) {\r\n            return {}.toString.call(obj).match(/\\s([a-zA-Z]+)/)[1].toLowerCase();\r\n        }\r\n\r\n        function isElement(obj) {\r\n            return (obj[0] || obj).nodeType;\r\n        }\r\n\r\n        function getSpecialTransitionEndEvent() {\r\n            return {\r\n                bindType: transition.end,\r\n                delegateType: transition.end,\r\n                handle: function handle(event) {\r\n                    if ($(event.target).is(this)) {\r\n                        return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params\r\n                    }\r\n                    return undefined;\r\n                }\r\n            };\r\n        }\r\n\r\n        function transitionEndTest() {\r\n            if (window.QUnit) {\r\n                return false;\r\n            }\r\n\r\n            var el = document.createElement('bootstrap');\r\n\r\n            for (var name in TransitionEndEvent) {\r\n                if (el.style[name] !== undefined) {\r\n                    return {\r\n                        end: TransitionEndEvent[name]\r\n                    };\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function transitionEndEmulator(duration) {\r\n            var _this = this;\r\n\r\n            var called = false;\r\n\r\n            $(this).one(Util.TRANSITION_END, function () {\r\n                called = true;\r\n            });\r\n\r\n            setTimeout(function () {\r\n                if (!called) {\r\n                    Util.triggerTransitionEnd(_this);\r\n                }\r\n            }, duration);\r\n\r\n            return this;\r\n        }\r\n\r\n        function setTransitionEndSupport() {\r\n            transition = transitionEndTest();\r\n\r\n            $.fn.emulateTransitionEnd = transitionEndEmulator;\r\n\r\n            if (Util.supportsTransitionEnd()) {\r\n                $.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * --------------------------------------------------------------------------\r\n         * Public Util Api\r\n         * --------------------------------------------------------------------------\r\n         */\r\n\r\n        var Util = {\r\n\r\n            TRANSITION_END: 'bsTransitionEnd',\r\n\r\n            getUID: function getUID(prefix) {\r\n                do {\r\n                    // eslint-disable-next-line no-bitwise\r\n                    prefix += ~~(Math.random() * MAX_UID); // \"~~\" acts like a faster Math.floor() here\r\n                } while (document.getElementById(prefix));\r\n                return prefix;\r\n            },\r\n            getSelectorFromElement: function getSelectorFromElement(element) {\r\n                var selector = element.getAttribute('data-target');\r\n\r\n                if (!selector) {\r\n                    selector = element.getAttribute('href') || '';\r\n                    selector = /^#[a-z]/i.test(selector) ? selector : null;\r\n                }\r\n\r\n                return selector;\r\n            },\r\n            reflow: function reflow(element) {\r\n                return element.offsetHeight;\r\n            },\r\n            triggerTransitionEnd: function triggerTransitionEnd(element) {\r\n                $(element).trigger(transition.end);\r\n            },\r\n            supportsTransitionEnd: function supportsTransitionEnd() {\r\n                return Boolean(transition);\r\n            },\r\n            typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {\r\n                for (var property in configTypes) {\r\n                    if (configTypes.hasOwnProperty(property)) {\r\n                        var expectedTypes = configTypes[property];\r\n                        var value = config[property];\r\n                        var valueType = value && isElement(value) ? 'element' : toType(value);\r\n\r\n                        if (!new RegExp(expectedTypes).test(valueType)) {\r\n                            throw new Error(componentName.toUpperCase() + ': ' + ('Option \"' + property + '\" provided type \"' + valueType + '\" ') + ('but expected type \"' + expectedTypes + '\".'));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        setTransitionEndSupport();\r\n\r\n        return Util;\r\n    }(jQuery);\r\n\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Bootstrap (v4.0.0-alpha.6): alert.js\r\n     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n     * --------------------------------------------------------------------------\r\n     */\r\n\r\n    var Alert = function ($) {\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Constants\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var NAME = 'alert';\r\n        var VERSION = '4.0.0-alpha.6';\r\n        var DATA_KEY = 'bs.alert';\r\n        var EVENT_KEY = '.' + DATA_KEY;\r\n        var DATA_API_KEY = '.data-api';\r\n        var JQUERY_NO_CONFLICT = $.fn[NAME];\r\n        var TRANSITION_DURATION = 150;\r\n\r\n        var Selector = {\r\n            DISMISS: '[data-dismiss=\"alert\"]'\r\n        };\r\n\r\n        var Event = {\r\n            CLOSE: 'close' + EVENT_KEY,\r\n            CLOSED: 'closed' + EVENT_KEY,\r\n            CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY\r\n        };\r\n\r\n        var ClassName = {\r\n            ALERT: 'alert',\r\n            FADE: 'fade',\r\n            SHOW: 'show'\r\n        };\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Class Definition\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var Alert = function () {\r\n            function Alert(element) {\r\n                _classCallCheck(this, Alert);\r\n\r\n                this._element = element;\r\n            }\r\n\r\n            // getters\r\n\r\n            // public\r\n\r\n            Alert.prototype.close = function close(element) {\r\n                element = element || this._element;\r\n\r\n                var rootElement = this._getRootElement(element);\r\n                var customEvent = this._triggerCloseEvent(rootElement);\r\n\r\n                if (customEvent.isDefaultPrevented()) {\r\n                    return;\r\n                }\r\n\r\n                this._removeElement(rootElement);\r\n            };\r\n\r\n            Alert.prototype.dispose = function dispose() {\r\n                $.removeData(this._element, DATA_KEY);\r\n                this._element = null;\r\n            };\r\n\r\n            // private\r\n\r\n            Alert.prototype._getRootElement = function _getRootElement(element) {\r\n                var selector = Util.getSelectorFromElement(element);\r\n                var parent = false;\r\n\r\n                if (selector) {\r\n                    parent = $(selector)[0];\r\n                }\r\n\r\n                if (!parent) {\r\n                    parent = $(element).closest('.' + ClassName.ALERT)[0];\r\n                }\r\n\r\n                return parent;\r\n            };\r\n\r\n            Alert.prototype._triggerCloseEvent = function _triggerCloseEvent(element) {\r\n                var closeEvent = $.Event(Event.CLOSE);\r\n\r\n                $(element).trigger(closeEvent);\r\n                return closeEvent;\r\n            };\r\n\r\n            Alert.prototype._removeElement = function _removeElement(element) {\r\n                var _this2 = this;\r\n\r\n                $(element).removeClass(ClassName.SHOW);\r\n\r\n                if (!Util.supportsTransitionEnd() || !$(element).hasClass(ClassName.FADE)) {\r\n                    this._destroyElement(element);\r\n                    return;\r\n                }\r\n\r\n                $(element).one(Util.TRANSITION_END, function (event) {\r\n                    return _this2._destroyElement(element, event);\r\n                }).emulateTransitionEnd(TRANSITION_DURATION);\r\n            };\r\n\r\n            Alert.prototype._destroyElement = function _destroyElement(element) {\r\n                $(element).detach().trigger(Event.CLOSED).remove();\r\n            };\r\n\r\n            // static\r\n\r\n            Alert._jQueryInterface = function _jQueryInterface(config) {\r\n                return this.each(function () {\r\n                    var $element = $(this);\r\n                    var data = $element.data(DATA_KEY);\r\n\r\n                    if (!data) {\r\n                        data = new Alert(this);\r\n                        $element.data(DATA_KEY, data);\r\n                    }\r\n\r\n                    if (config === 'close') {\r\n                        data[config](this);\r\n                    }\r\n                });\r\n            };\r\n\r\n            Alert._handleDismiss = function _handleDismiss(alertInstance) {\r\n                return function (event) {\r\n                    if (event) {\r\n                        event.preventDefault();\r\n                    }\r\n\r\n                    alertInstance.close(this);\r\n                };\r\n            };\r\n\r\n            _createClass(Alert, null, [{\r\n                key: 'VERSION',\r\n                get: function get() {\r\n                    return VERSION;\r\n                }\r\n            }]);\r\n\r\n            return Alert;\r\n        }();\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Data Api implementation\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * jQuery\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $.fn[NAME] = Alert._jQueryInterface;\r\n        $.fn[NAME].Constructor = Alert;\r\n        $.fn[NAME].noConflict = function () {\r\n            $.fn[NAME] = JQUERY_NO_CONFLICT;\r\n            return Alert._jQueryInterface;\r\n        };\r\n\r\n        return Alert;\r\n    }(jQuery);\r\n\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Bootstrap (v4.0.0-alpha.6): button.js\r\n     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n     * --------------------------------------------------------------------------\r\n     */\r\n\r\n    var Button = function ($) {\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Constants\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var NAME = 'button';\r\n        var VERSION = '4.0.0-alpha.6';\r\n        var DATA_KEY = 'bs.button';\r\n        var EVENT_KEY = '.' + DATA_KEY;\r\n        var DATA_API_KEY = '.data-api';\r\n        var JQUERY_NO_CONFLICT = $.fn[NAME];\r\n\r\n        var ClassName = {\r\n            ACTIVE: 'active',\r\n            BUTTON: 'btn',\r\n            FOCUS: 'focus'\r\n        };\r\n\r\n        var Selector = {\r\n            DATA_TOGGLE_CARROT: '[data-toggle^=\"button\"]',\r\n            DATA_TOGGLE: '[data-toggle=\"buttons\"]',\r\n            INPUT: 'input',\r\n            ACTIVE: '.active',\r\n            BUTTON: '.btn'\r\n        };\r\n\r\n        var Event = {\r\n            CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY,\r\n            FOCUS_BLUR_DATA_API: 'focus' + EVENT_KEY + DATA_API_KEY + ' ' + ('blur' + EVENT_KEY + DATA_API_KEY)\r\n        };\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Class Definition\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var Button = function () {\r\n            function Button(element) {\r\n                _classCallCheck(this, Button);\r\n\r\n                this._element = element;\r\n            }\r\n\r\n            // getters\r\n\r\n            // public\r\n\r\n            Button.prototype.toggle = function toggle() {\r\n                var triggerChangeEvent = true;\r\n                var rootElement = $(this._element).closest(Selector.DATA_TOGGLE)[0];\r\n\r\n                if (rootElement) {\r\n                    var input = $(this._element).find(Selector.INPUT)[0];\r\n\r\n                    if (input) {\r\n                        if (input.type === 'radio') {\r\n                            if (input.checked && $(this._element).hasClass(ClassName.ACTIVE)) {\r\n                                triggerChangeEvent = false;\r\n                            } else {\r\n                                var activeElement = $(rootElement).find(Selector.ACTIVE)[0];\r\n\r\n                                if (activeElement) {\r\n                                    $(activeElement).removeClass(ClassName.ACTIVE);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (triggerChangeEvent) {\r\n                            input.checked = !$(this._element).hasClass(ClassName.ACTIVE);\r\n                            $(input).trigger('change');\r\n                        }\r\n\r\n                        input.focus();\r\n                    }\r\n                }\r\n\r\n                this._element.setAttribute('aria-pressed', !$(this._element).hasClass(ClassName.ACTIVE));\r\n\r\n                if (triggerChangeEvent) {\r\n                    $(this._element).toggleClass(ClassName.ACTIVE);\r\n                }\r\n            };\r\n\r\n            Button.prototype.dispose = function dispose() {\r\n                $.removeData(this._element, DATA_KEY);\r\n                this._element = null;\r\n            };\r\n\r\n            // static\r\n\r\n            Button._jQueryInterface = function _jQueryInterface(config) {\r\n                return this.each(function () {\r\n                    var data = $(this).data(DATA_KEY);\r\n\r\n                    if (!data) {\r\n                        data = new Button(this);\r\n                        $(this).data(DATA_KEY, data);\r\n                    }\r\n\r\n                    if (config === 'toggle') {\r\n                        data[config]();\r\n                    }\r\n                });\r\n            };\r\n\r\n            _createClass(Button, null, [{\r\n                key: 'VERSION',\r\n                get: function get() {\r\n                    return VERSION;\r\n                }\r\n            }]);\r\n\r\n            return Button;\r\n        }();\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Data Api implementation\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {\r\n            event.preventDefault();\r\n\r\n            var button = event.target;\r\n\r\n            if (!$(button).hasClass(ClassName.BUTTON)) {\r\n                button = $(button).closest(Selector.BUTTON);\r\n            }\r\n\r\n            Button._jQueryInterface.call($(button), 'toggle');\r\n        }).on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, function (event) {\r\n            var button = $(event.target).closest(Selector.BUTTON)[0];\r\n            $(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));\r\n        });\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * jQuery\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $.fn[NAME] = Button._jQueryInterface;\r\n        $.fn[NAME].Constructor = Button;\r\n        $.fn[NAME].noConflict = function () {\r\n            $.fn[NAME] = JQUERY_NO_CONFLICT;\r\n            return Button._jQueryInterface;\r\n        };\r\n\r\n        return Button;\r\n    }(jQuery);\r\n\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Bootstrap (v4.0.0-alpha.6): carousel.js\r\n     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n     * --------------------------------------------------------------------------\r\n     */\r\n\r\n    var Carousel = function ($) {\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Constants\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var NAME = 'carousel';\r\n        var VERSION = '4.0.0-alpha.6';\r\n        var DATA_KEY = 'bs.carousel';\r\n        var EVENT_KEY = '.' + DATA_KEY;\r\n        var DATA_API_KEY = '.data-api';\r\n        var JQUERY_NO_CONFLICT = $.fn[NAME];\r\n        var TRANSITION_DURATION = 600;\r\n        var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key\r\n        var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key\r\n\r\n        var Default = {\r\n            interval: 5000,\r\n            keyboard: true,\r\n            slide: false,\r\n            pause: 'hover',\r\n            wrap: true\r\n        };\r\n\r\n        var DefaultType = {\r\n            interval: '(number|boolean)',\r\n            keyboard: 'boolean',\r\n            slide: '(boolean|string)',\r\n            pause: '(string|boolean)',\r\n            wrap: 'boolean'\r\n        };\r\n\r\n        var Direction = {\r\n            NEXT: 'next',\r\n            PREV: 'prev',\r\n            LEFT: 'left',\r\n            RIGHT: 'right'\r\n        };\r\n\r\n        var Event = {\r\n            SLIDE: 'slide' + EVENT_KEY,\r\n            SLID: 'slid' + EVENT_KEY,\r\n            KEYDOWN: 'keydown' + EVENT_KEY,\r\n            MOUSEENTER: 'mouseenter' + EVENT_KEY,\r\n            MOUSELEAVE: 'mouseleave' + EVENT_KEY,\r\n            LOAD_DATA_API: 'load' + EVENT_KEY + DATA_API_KEY,\r\n            CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY\r\n        };\r\n\r\n        var ClassName = {\r\n            CAROUSEL: 'carousel',\r\n            ACTIVE: 'active',\r\n            SLIDE: 'slide',\r\n            RIGHT: 'carousel-item-right',\r\n            LEFT: 'carousel-item-left',\r\n            NEXT: 'carousel-item-next',\r\n            PREV: 'carousel-item-prev',\r\n            ITEM: 'carousel-item'\r\n        };\r\n\r\n        var Selector = {\r\n            ACTIVE: '.active',\r\n            ACTIVE_ITEM: '.active.carousel-item',\r\n            ITEM: '.carousel-item',\r\n            NEXT_PREV: '.carousel-item-next, .carousel-item-prev',\r\n            INDICATORS: '.carousel-indicators',\r\n            DATA_SLIDE: '[data-slide], [data-slide-to]',\r\n            DATA_RIDE: '[data-ride=\"carousel\"]'\r\n        };\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Class Definition\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var Carousel = function () {\r\n            function Carousel(element, config) {\r\n                _classCallCheck(this, Carousel);\r\n\r\n                this._items = null;\r\n                this._interval = null;\r\n                this._activeElement = null;\r\n\r\n                this._isPaused = false;\r\n                this._isSliding = false;\r\n\r\n                this._config = this._getConfig(config);\r\n                this._element = $(element)[0];\r\n                this._indicatorsElement = $(this._element).find(Selector.INDICATORS)[0];\r\n\r\n                this._addEventListeners();\r\n            }\r\n\r\n            // getters\r\n\r\n            // public\r\n\r\n            Carousel.prototype.next = function next() {\r\n                if (this._isSliding) {\r\n                    throw new Error('Carousel is sliding');\r\n                }\r\n                this._slide(Direction.NEXT);\r\n            };\r\n\r\n            Carousel.prototype.nextWhenVisible = function nextWhenVisible() {\r\n                // Don't call next when the page isn't visible\r\n                if (!document.hidden) {\r\n                    this.next();\r\n                }\r\n            };\r\n\r\n            Carousel.prototype.prev = function prev() {\r\n                if (this._isSliding) {\r\n                    throw new Error('Carousel is sliding');\r\n                }\r\n                this._slide(Direction.PREVIOUS);\r\n            };\r\n\r\n            Carousel.prototype.pause = function pause(event) {\r\n                if (!event) {\r\n                    this._isPaused = true;\r\n                }\r\n\r\n                if ($(this._element).find(Selector.NEXT_PREV)[0] && Util.supportsTransitionEnd()) {\r\n                    Util.triggerTransitionEnd(this._element);\r\n                    this.cycle(true);\r\n                }\r\n\r\n                clearInterval(this._interval);\r\n                this._interval = null;\r\n            };\r\n\r\n            Carousel.prototype.cycle = function cycle(event) {\r\n                if (!event) {\r\n                    this._isPaused = false;\r\n                }\r\n\r\n                if (this._interval) {\r\n                    clearInterval(this._interval);\r\n                    this._interval = null;\r\n                }\r\n\r\n                if (this._config.interval && !this._isPaused) {\r\n                    this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);\r\n                }\r\n            };\r\n\r\n            Carousel.prototype.to = function to(index) {\r\n                var _this3 = this;\r\n\r\n                this._activeElement = $(this._element).find(Selector.ACTIVE_ITEM)[0];\r\n\r\n                var activeIndex = this._getItemIndex(this._activeElement);\r\n\r\n                if (index > this._items.length - 1 || index < 0) {\r\n                    return;\r\n                }\r\n\r\n                if (this._isSliding) {\r\n                    $(this._element).one(Event.SLID, function () {\r\n                        return _this3.to(index);\r\n                    });\r\n                    return;\r\n                }\r\n\r\n                if (activeIndex === index) {\r\n                    this.pause();\r\n                    this.cycle();\r\n                    return;\r\n                }\r\n\r\n                var direction = index > activeIndex ? Direction.NEXT : Direction.PREVIOUS;\r\n\r\n                this._slide(direction, this._items[index]);\r\n            };\r\n\r\n            Carousel.prototype.dispose = function dispose() {\r\n                $(this._element).off(EVENT_KEY);\r\n                $.removeData(this._element, DATA_KEY);\r\n\r\n                this._items = null;\r\n                this._config = null;\r\n                this._element = null;\r\n                this._interval = null;\r\n                this._isPaused = null;\r\n                this._isSliding = null;\r\n                this._activeElement = null;\r\n                this._indicatorsElement = null;\r\n            };\r\n\r\n            // private\r\n\r\n            Carousel.prototype._getConfig = function _getConfig(config) {\r\n                config = $.extend({}, Default, config);\r\n                Util.typeCheckConfig(NAME, config, DefaultType);\r\n                return config;\r\n            };\r\n\r\n            Carousel.prototype._addEventListeners = function _addEventListeners() {\r\n                var _this4 = this;\r\n\r\n                if (this._config.keyboard) {\r\n                    $(this._element).on(Event.KEYDOWN, function (event) {\r\n                        return _this4._keydown(event);\r\n                    });\r\n                }\r\n\r\n                if (this._config.pause === 'hover' && !('ontouchstart' in document.documentElement)) {\r\n                    $(this._element).on(Event.MOUSEENTER, function (event) {\r\n                        return _this4.pause(event);\r\n                    }).on(Event.MOUSELEAVE, function (event) {\r\n                        return _this4.cycle(event);\r\n                    });\r\n                }\r\n            };\r\n\r\n            Carousel.prototype._keydown = function _keydown(event) {\r\n                if (/input|textarea/i.test(event.target.tagName)) {\r\n                    return;\r\n                }\r\n\r\n                switch (event.which) {\r\n                    case ARROW_LEFT_KEYCODE:\r\n                        event.preventDefault();\r\n                        this.prev();\r\n                        break;\r\n                    case ARROW_RIGHT_KEYCODE:\r\n                        event.preventDefault();\r\n                        this.next();\r\n                        break;\r\n                    default:\r\n                        return;\r\n                }\r\n            };\r\n\r\n            Carousel.prototype._getItemIndex = function _getItemIndex(element) {\r\n                this._items = $.makeArray($(element).parent().find(Selector.ITEM));\r\n                return this._items.indexOf(element);\r\n            };\r\n\r\n            Carousel.prototype._getItemByDirection = function _getItemByDirection(direction, activeElement) {\r\n                var isNextDirection = direction === Direction.NEXT;\r\n                var isPrevDirection = direction === Direction.PREVIOUS;\r\n                var activeIndex = this._getItemIndex(activeElement);\r\n                var lastItemIndex = this._items.length - 1;\r\n                var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;\r\n\r\n                if (isGoingToWrap && !this._config.wrap) {\r\n                    return activeElement;\r\n                }\r\n\r\n                var delta = direction === Direction.PREVIOUS ? -1 : 1;\r\n                var itemIndex = (activeIndex + delta) % this._items.length;\r\n\r\n                return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];\r\n            };\r\n\r\n            Carousel.prototype._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {\r\n                var slideEvent = $.Event(Event.SLIDE, {\r\n                    relatedTarget: relatedTarget,\r\n                    direction: eventDirectionName\r\n                });\r\n\r\n                $(this._element).trigger(slideEvent);\r\n\r\n                return slideEvent;\r\n            };\r\n\r\n            Carousel.prototype._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {\r\n                if (this._indicatorsElement) {\r\n                    $(this._indicatorsElement).find(Selector.ACTIVE).removeClass(ClassName.ACTIVE);\r\n\r\n                    var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];\r\n\r\n                    if (nextIndicator) {\r\n                        $(nextIndicator).addClass(ClassName.ACTIVE);\r\n                    }\r\n                }\r\n            };\r\n\r\n            Carousel.prototype._slide = function _slide(direction, element) {\r\n                var _this5 = this;\r\n\r\n                var activeElement = $(this._element).find(Selector.ACTIVE_ITEM)[0];\r\n                var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);\r\n\r\n                var isCycling = Boolean(this._interval);\r\n\r\n                var directionalClassName = void 0;\r\n                var orderClassName = void 0;\r\n                var eventDirectionName = void 0;\r\n\r\n                if (direction === Direction.NEXT) {\r\n                    directionalClassName = ClassName.LEFT;\r\n                    orderClassName = ClassName.NEXT;\r\n                    eventDirectionName = Direction.LEFT;\r\n                } else {\r\n                    directionalClassName = ClassName.RIGHT;\r\n                    orderClassName = ClassName.PREV;\r\n                    eventDirectionName = Direction.RIGHT;\r\n                }\r\n\r\n                if (nextElement && $(nextElement).hasClass(ClassName.ACTIVE)) {\r\n                    this._isSliding = false;\r\n                    return;\r\n                }\r\n\r\n                var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);\r\n                if (slideEvent.isDefaultPrevented()) {\r\n                    return;\r\n                }\r\n\r\n                if (!activeElement || !nextElement) {\r\n                    // some weirdness is happening, so we bail\r\n                    return;\r\n                }\r\n\r\n                this._isSliding = true;\r\n\r\n                if (isCycling) {\r\n                    this.pause();\r\n                }\r\n\r\n                this._setActiveIndicatorElement(nextElement);\r\n\r\n                var slidEvent = $.Event(Event.SLID, {\r\n                    relatedTarget: nextElement,\r\n                    direction: eventDirectionName\r\n                });\r\n\r\n                if (Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.SLIDE)) {\r\n\r\n                    $(nextElement).addClass(orderClassName);\r\n\r\n                    Util.reflow(nextElement);\r\n\r\n                    $(activeElement).addClass(directionalClassName);\r\n                    $(nextElement).addClass(directionalClassName);\r\n\r\n                    $(activeElement).one(Util.TRANSITION_END, function () {\r\n                        $(nextElement).removeClass(directionalClassName + ' ' + orderClassName).addClass(ClassName.ACTIVE);\r\n\r\n                        $(activeElement).removeClass(ClassName.ACTIVE + ' ' + orderClassName + ' ' + directionalClassName);\r\n\r\n                        _this5._isSliding = false;\r\n\r\n                        setTimeout(function () {\r\n                            return $(_this5._element).trigger(slidEvent);\r\n                        }, 0);\r\n                    }).emulateTransitionEnd(TRANSITION_DURATION);\r\n                } else {\r\n                    $(activeElement).removeClass(ClassName.ACTIVE);\r\n                    $(nextElement).addClass(ClassName.ACTIVE);\r\n\r\n                    this._isSliding = false;\r\n                    $(this._element).trigger(slidEvent);\r\n                }\r\n\r\n                if (isCycling) {\r\n                    this.cycle();\r\n                }\r\n            };\r\n\r\n            // static\r\n\r\n            Carousel._jQueryInterface = function _jQueryInterface(config) {\r\n                return this.each(function () {\r\n                    var data = $(this).data(DATA_KEY);\r\n                    var _config = $.extend({}, Default, $(this).data());\r\n\r\n                    if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object') {\r\n                        $.extend(_config, config);\r\n                    }\r\n\r\n                    var action = typeof config === 'string' ? config : _config.slide;\r\n\r\n                    if (!data) {\r\n                        data = new Carousel(this, _config);\r\n                        $(this).data(DATA_KEY, data);\r\n                    }\r\n\r\n                    if (typeof config === 'number') {\r\n                        data.to(config);\r\n                    } else if (typeof action === 'string') {\r\n                        if (data[action] === undefined) {\r\n                            throw new Error('No method named \"' + action + '\"');\r\n                        }\r\n                        data[action]();\r\n                    } else if (_config.interval) {\r\n                        data.pause();\r\n                        data.cycle();\r\n                    }\r\n                });\r\n            };\r\n\r\n            Carousel._dataApiClickHandler = function _dataApiClickHandler(event) {\r\n                var selector = Util.getSelectorFromElement(this);\r\n\r\n                if (!selector) {\r\n                    return;\r\n                }\r\n\r\n                var target = $(selector)[0];\r\n\r\n                if (!target || !$(target).hasClass(ClassName.CAROUSEL)) {\r\n                    return;\r\n                }\r\n\r\n                var config = $.extend({}, $(target).data(), $(this).data());\r\n                var slideIndex = this.getAttribute('data-slide-to');\r\n\r\n                if (slideIndex) {\r\n                    config.interval = false;\r\n                }\r\n\r\n                Carousel._jQueryInterface.call($(target), config);\r\n\r\n                if (slideIndex) {\r\n                    $(target).data(DATA_KEY).to(slideIndex);\r\n                }\r\n\r\n                event.preventDefault();\r\n            };\r\n\r\n            _createClass(Carousel, null, [{\r\n                key: 'VERSION',\r\n                get: function get() {\r\n                    return VERSION;\r\n                }\r\n            }, {\r\n                key: 'Default',\r\n                get: function get() {\r\n                    return Default;\r\n                }\r\n            }]);\r\n\r\n            return Carousel;\r\n        }();\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Data Api implementation\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $(document).on(Event.CLICK_DATA_API, Selector.DATA_SLIDE, Carousel._dataApiClickHandler);\r\n\r\n        $(window).on(Event.LOAD_DATA_API, function () {\r\n            $(Selector.DATA_RIDE).each(function () {\r\n                var $carousel = $(this);\r\n                Carousel._jQueryInterface.call($carousel, $carousel.data());\r\n            });\r\n        });\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * jQuery\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $.fn[NAME] = Carousel._jQueryInterface;\r\n        $.fn[NAME].Constructor = Carousel;\r\n        $.fn[NAME].noConflict = function () {\r\n            $.fn[NAME] = JQUERY_NO_CONFLICT;\r\n            return Carousel._jQueryInterface;\r\n        };\r\n\r\n        return Carousel;\r\n    }(jQuery);\r\n\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Bootstrap (v4.0.0-alpha.6): collapse.js\r\n     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n     * --------------------------------------------------------------------------\r\n     */\r\n\r\n    var Collapse = function ($) {\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Constants\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var NAME = 'collapse';\r\n        var VERSION = '4.0.0-alpha.6';\r\n        var DATA_KEY = 'bs.collapse';\r\n        var EVENT_KEY = '.' + DATA_KEY;\r\n        var DATA_API_KEY = '.data-api';\r\n        var JQUERY_NO_CONFLICT = $.fn[NAME];\r\n        var TRANSITION_DURATION = 600;\r\n\r\n        var Default = {\r\n            toggle: true,\r\n            parent: ''\r\n        };\r\n\r\n        var DefaultType = {\r\n            toggle: 'boolean',\r\n            parent: 'string'\r\n        };\r\n\r\n        var Event = {\r\n            SHOW: 'show' + EVENT_KEY,\r\n            SHOWN: 'shown' + EVENT_KEY,\r\n            HIDE: 'hide' + EVENT_KEY,\r\n            HIDDEN: 'hidden' + EVENT_KEY,\r\n            CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY\r\n        };\r\n\r\n        var ClassName = {\r\n            SHOW: 'show',\r\n            COLLAPSE: 'collapse',\r\n            COLLAPSING: 'collapsing',\r\n            COLLAPSED: 'collapsed'\r\n        };\r\n\r\n        var Dimension = {\r\n            WIDTH: 'width',\r\n            HEIGHT: 'height'\r\n        };\r\n\r\n        var Selector = {\r\n            ACTIVES: '.card > .show, .card > .collapsing',\r\n            DATA_TOGGLE: '[data-toggle=\"collapse\"]'\r\n        };\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Class Definition\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var Collapse = function () {\r\n            function Collapse(element, config) {\r\n                _classCallCheck(this, Collapse);\r\n\r\n                this._isTransitioning = false;\r\n                this._element = element;\r\n                this._config = this._getConfig(config);\r\n                this._triggerArray = $.makeArray($('[data-toggle=\"collapse\"][href=\"#' + element.id + '\"],' + ('[data-toggle=\"collapse\"][data-target=\"#' + element.id + '\"]')));\r\n\r\n                this._parent = this._config.parent ? this._getParent() : null;\r\n\r\n                if (!this._config.parent) {\r\n                    this._addAriaAndCollapsedClass(this._element, this._triggerArray);\r\n                }\r\n\r\n                if (this._config.toggle) {\r\n                    this.toggle();\r\n                }\r\n            }\r\n\r\n            // getters\r\n\r\n            // public\r\n\r\n            Collapse.prototype.toggle = function toggle() {\r\n                if ($(this._element).hasClass(ClassName.SHOW)) {\r\n                    this.hide();\r\n                } else {\r\n                    this.show();\r\n                }\r\n            };\r\n\r\n            Collapse.prototype.show = function show() {\r\n                var _this6 = this;\r\n\r\n                if (this._isTransitioning) {\r\n                    throw new Error('Collapse is transitioning');\r\n                }\r\n\r\n                if ($(this._element).hasClass(ClassName.SHOW)) {\r\n                    return;\r\n                }\r\n\r\n                var actives = void 0;\r\n                var activesData = void 0;\r\n\r\n                if (this._parent) {\r\n                    actives = $.makeArray($(this._parent).find(Selector.ACTIVES));\r\n                    if (!actives.length) {\r\n                        actives = null;\r\n                    }\r\n                }\r\n\r\n                if (actives) {\r\n                    activesData = $(actives).data(DATA_KEY);\r\n                    if (activesData && activesData._isTransitioning) {\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                var startEvent = $.Event(Event.SHOW);\r\n                $(this._element).trigger(startEvent);\r\n                if (startEvent.isDefaultPrevented()) {\r\n                    return;\r\n                }\r\n\r\n                if (actives) {\r\n                    Collapse._jQueryInterface.call($(actives), 'hide');\r\n                    if (!activesData) {\r\n                        $(actives).data(DATA_KEY, null);\r\n                    }\r\n                }\r\n\r\n                var dimension = this._getDimension();\r\n\r\n                $(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING);\r\n\r\n                this._element.style[dimension] = 0;\r\n                this._element.setAttribute('aria-expanded', true);\r\n\r\n                if (this._triggerArray.length) {\r\n                    $(this._triggerArray).removeClass(ClassName.COLLAPSED).attr('aria-expanded', true);\r\n                }\r\n\r\n                this.setTransitioning(true);\r\n\r\n                var complete = function complete() {\r\n                    $(_this6._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW);\r\n\r\n                    _this6._element.style[dimension] = '';\r\n\r\n                    _this6.setTransitioning(false);\r\n\r\n                    $(_this6._element).trigger(Event.SHOWN);\r\n                };\r\n\r\n                if (!Util.supportsTransitionEnd()) {\r\n                    complete();\r\n                    return;\r\n                }\r\n\r\n                var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\r\n                var scrollSize = 'scroll' + capitalizedDimension;\r\n\r\n                $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);\r\n\r\n                this._element.style[dimension] = this._element[scrollSize] + 'px';\r\n            };\r\n\r\n            Collapse.prototype.hide = function hide() {\r\n                var _this7 = this;\r\n\r\n                if (this._isTransitioning) {\r\n                    throw new Error('Collapse is transitioning');\r\n                }\r\n\r\n                if (!$(this._element).hasClass(ClassName.SHOW)) {\r\n                    return;\r\n                }\r\n\r\n                var startEvent = $.Event(Event.HIDE);\r\n                $(this._element).trigger(startEvent);\r\n                if (startEvent.isDefaultPrevented()) {\r\n                    return;\r\n                }\r\n\r\n                var dimension = this._getDimension();\r\n                var offsetDimension = dimension === Dimension.WIDTH ? 'offsetWidth' : 'offsetHeight';\r\n\r\n                this._element.style[dimension] = this._element[offsetDimension] + 'px';\r\n\r\n                Util.reflow(this._element);\r\n\r\n                $(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);\r\n\r\n                this._element.setAttribute('aria-expanded', false);\r\n\r\n                if (this._triggerArray.length) {\r\n                    $(this._triggerArray).addClass(ClassName.COLLAPSED).attr('aria-expanded', false);\r\n                }\r\n\r\n                this.setTransitioning(true);\r\n\r\n                var complete = function complete() {\r\n                    _this7.setTransitioning(false);\r\n                    $(_this7._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN);\r\n                };\r\n\r\n                this._element.style[dimension] = '';\r\n\r\n                if (!Util.supportsTransitionEnd()) {\r\n                    complete();\r\n                    return;\r\n                }\r\n\r\n                $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);\r\n            };\r\n\r\n            Collapse.prototype.setTransitioning = function setTransitioning(isTransitioning) {\r\n                this._isTransitioning = isTransitioning;\r\n            };\r\n\r\n            Collapse.prototype.dispose = function dispose() {\r\n                $.removeData(this._element, DATA_KEY);\r\n\r\n                this._config = null;\r\n                this._parent = null;\r\n                this._element = null;\r\n                this._triggerArray = null;\r\n                this._isTransitioning = null;\r\n            };\r\n\r\n            // private\r\n\r\n            Collapse.prototype._getConfig = function _getConfig(config) {\r\n                config = $.extend({}, Default, config);\r\n                config.toggle = Boolean(config.toggle); // coerce string values\r\n                Util.typeCheckConfig(NAME, config, DefaultType);\r\n                return config;\r\n            };\r\n\r\n            Collapse.prototype._getDimension = function _getDimension() {\r\n                var hasWidth = $(this._element).hasClass(Dimension.WIDTH);\r\n                return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;\r\n            };\r\n\r\n            Collapse.prototype._getParent = function _getParent() {\r\n                var _this8 = this;\r\n\r\n                var parent = $(this._config.parent)[0];\r\n                var selector = '[data-toggle=\"collapse\"][data-parent=\"' + this._config.parent + '\"]';\r\n\r\n                $(parent).find(selector).each(function (i, element) {\r\n                    _this8._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);\r\n                });\r\n\r\n                return parent;\r\n            };\r\n\r\n            Collapse.prototype._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {\r\n                if (element) {\r\n                    var isOpen = $(element).hasClass(ClassName.SHOW);\r\n                    element.setAttribute('aria-expanded', isOpen);\r\n\r\n                    if (triggerArray.length) {\r\n                        $(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);\r\n                    }\r\n                }\r\n            };\r\n\r\n            // static\r\n\r\n            Collapse._getTargetFromElement = function _getTargetFromElement(element) {\r\n                var selector = Util.getSelectorFromElement(element);\r\n                return selector ? $(selector)[0] : null;\r\n            };\r\n\r\n            Collapse._jQueryInterface = function _jQueryInterface(config) {\r\n                return this.each(function () {\r\n                    var $this = $(this);\r\n                    var data = $this.data(DATA_KEY);\r\n                    var _config = $.extend({}, Default, $this.data(), (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' && config);\r\n\r\n                    if (!data && _config.toggle && /show|hide/.test(config)) {\r\n                        _config.toggle = false;\r\n                    }\r\n\r\n                    if (!data) {\r\n                        data = new Collapse(this, _config);\r\n                        $this.data(DATA_KEY, data);\r\n                    }\r\n\r\n                    if (typeof config === 'string') {\r\n                        if (data[config] === undefined) {\r\n                            throw new Error('No method named \"' + config + '\"');\r\n                        }\r\n                        data[config]();\r\n                    }\r\n                });\r\n            };\r\n\r\n            _createClass(Collapse, null, [{\r\n                key: 'VERSION',\r\n                get: function get() {\r\n                    return VERSION;\r\n                }\r\n            }, {\r\n                key: 'Default',\r\n                get: function get() {\r\n                    return Default;\r\n                }\r\n            }]);\r\n\r\n            return Collapse;\r\n        }();\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Data Api implementation\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\r\n            event.preventDefault();\r\n\r\n            var target = Collapse._getTargetFromElement(this);\r\n            var data = $(target).data(DATA_KEY);\r\n            var config = data ? 'toggle' : $(this).data();\r\n\r\n            Collapse._jQueryInterface.call($(target), config);\r\n        });\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * jQuery\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $.fn[NAME] = Collapse._jQueryInterface;\r\n        $.fn[NAME].Constructor = Collapse;\r\n        $.fn[NAME].noConflict = function () {\r\n            $.fn[NAME] = JQUERY_NO_CONFLICT;\r\n            return Collapse._jQueryInterface;\r\n        };\r\n\r\n        return Collapse;\r\n    }(jQuery);\r\n\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Bootstrap (v4.0.0-alpha.6): dropdown.js\r\n     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n     * --------------------------------------------------------------------------\r\n     */\r\n\r\n    var Dropdown = function ($) {\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Constants\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var NAME = 'dropdown';\r\n        var VERSION = '4.0.0-alpha.6';\r\n        var DATA_KEY = 'bs.dropdown';\r\n        var EVENT_KEY = '.' + DATA_KEY;\r\n        var DATA_API_KEY = '.data-api';\r\n        var JQUERY_NO_CONFLICT = $.fn[NAME];\r\n        var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key\r\n        var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key\r\n        var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key\r\n        var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)\r\n\r\n        var Event = {\r\n            HIDE: 'hide' + EVENT_KEY,\r\n            HIDDEN: 'hidden' + EVENT_KEY,\r\n            SHOW: 'show' + EVENT_KEY,\r\n            SHOWN: 'shown' + EVENT_KEY,\r\n            CLICK: 'click' + EVENT_KEY,\r\n            CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY,\r\n            FOCUSIN_DATA_API: 'focusin' + EVENT_KEY + DATA_API_KEY,\r\n            KEYDOWN_DATA_API: 'keydown' + EVENT_KEY + DATA_API_KEY\r\n        };\r\n\r\n        var ClassName = {\r\n            BACKDROP: 'dropdown-backdrop',\r\n            DISABLED: 'disabled',\r\n            SHOW: 'show'\r\n        };\r\n\r\n        var Selector = {\r\n            BACKDROP: '.dropdown-backdrop',\r\n            DATA_TOGGLE: '[data-toggle=\"dropdown\"]',\r\n            FORM_CHILD: '.dropdown form',\r\n            ROLE_MENU: '[role=\"menu\"]',\r\n            ROLE_LISTBOX: '[role=\"listbox\"]',\r\n            NAVBAR_NAV: '.navbar-nav',\r\n            VISIBLE_ITEMS: '[role=\"menu\"] li:not(.disabled) a, ' + '[role=\"listbox\"] li:not(.disabled) a'\r\n        };\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Class Definition\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var Dropdown = function () {\r\n            function Dropdown(element) {\r\n                _classCallCheck(this, Dropdown);\r\n\r\n                this._element = element;\r\n\r\n                this._addEventListeners();\r\n            }\r\n\r\n            // getters\r\n\r\n            // public\r\n\r\n            Dropdown.prototype.toggle = function toggle() {\r\n                if (this.disabled || $(this).hasClass(ClassName.DISABLED)) {\r\n                    return false;\r\n                }\r\n\r\n                var parent = Dropdown._getParentFromElement(this);\r\n                var isActive = $(parent).hasClass(ClassName.SHOW);\r\n\r\n                Dropdown._clearMenus();\r\n\r\n                if (isActive) {\r\n                    return false;\r\n                }\r\n\r\n                if ('ontouchstart' in document.documentElement && !$(parent).closest(Selector.NAVBAR_NAV).length) {\r\n\r\n                    // if mobile we use a backdrop because click events don't delegate\r\n                    var dropdown = document.createElement('div');\r\n                    dropdown.className = ClassName.BACKDROP;\r\n                    $(dropdown).insertBefore(this);\r\n                    $(dropdown).on('click', Dropdown._clearMenus);\r\n                }\r\n\r\n                var relatedTarget = {\r\n                    relatedTarget: this\r\n                };\r\n                var showEvent = $.Event(Event.SHOW, relatedTarget);\r\n\r\n                $(parent).trigger(showEvent);\r\n\r\n                if (showEvent.isDefaultPrevented()) {\r\n                    return false;\r\n                }\r\n\r\n                this.focus();\r\n                this.setAttribute('aria-expanded', true);\r\n\r\n                $(parent).toggleClass(ClassName.SHOW);\r\n                $(parent).trigger($.Event(Event.SHOWN, relatedTarget));\r\n\r\n                return false;\r\n            };\r\n\r\n            Dropdown.prototype.dispose = function dispose() {\r\n                $.removeData(this._element, DATA_KEY);\r\n                $(this._element).off(EVENT_KEY);\r\n                this._element = null;\r\n            };\r\n\r\n            // private\r\n\r\n            Dropdown.prototype._addEventListeners = function _addEventListeners() {\r\n                $(this._element).on(Event.CLICK, this.toggle);\r\n            };\r\n\r\n            // static\r\n\r\n            Dropdown._jQueryInterface = function _jQueryInterface(config) {\r\n                return this.each(function () {\r\n                    var data = $(this).data(DATA_KEY);\r\n\r\n                    if (!data) {\r\n                        data = new Dropdown(this);\r\n                        $(this).data(DATA_KEY, data);\r\n                    }\r\n\r\n                    if (typeof config === 'string') {\r\n                        if (data[config] === undefined) {\r\n                            throw new Error('No method named \"' + config + '\"');\r\n                        }\r\n                        data[config].call(this);\r\n                    }\r\n                });\r\n            };\r\n\r\n            Dropdown._clearMenus = function _clearMenus(event) {\r\n                if (event && event.which === RIGHT_MOUSE_BUTTON_WHICH) {\r\n                    return;\r\n                }\r\n\r\n                var backdrop = $(Selector.BACKDROP)[0];\r\n                if (backdrop) {\r\n                    backdrop.parentNode.removeChild(backdrop);\r\n                }\r\n\r\n                var toggles = $.makeArray($(Selector.DATA_TOGGLE));\r\n\r\n                for (var i = 0; i < toggles.length; i++) {\r\n                    var parent = Dropdown._getParentFromElement(toggles[i]);\r\n                    var relatedTarget = {\r\n                        relatedTarget: toggles[i]\r\n                    };\r\n\r\n                    if (!$(parent).hasClass(ClassName.SHOW)) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'focusin') && $.contains(parent, event.target)) {\r\n                        continue;\r\n                    }\r\n\r\n                    var hideEvent = $.Event(Event.HIDE, relatedTarget);\r\n                    $(parent).trigger(hideEvent);\r\n                    if (hideEvent.isDefaultPrevented()) {\r\n                        continue;\r\n                    }\r\n\r\n                    toggles[i].setAttribute('aria-expanded', 'false');\r\n\r\n                    $(parent).removeClass(ClassName.SHOW).trigger($.Event(Event.HIDDEN, relatedTarget));\r\n                }\r\n            };\r\n\r\n            Dropdown._getParentFromElement = function _getParentFromElement(element) {\r\n                var parent = void 0;\r\n                var selector = Util.getSelectorFromElement(element);\r\n\r\n                if (selector) {\r\n                    parent = $(selector)[0];\r\n                }\r\n\r\n                return parent || element.parentNode;\r\n            };\r\n\r\n            Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {\r\n                if (!/(38|40|27|32)/.test(event.which) || /input|textarea/i.test(event.target.tagName)) {\r\n                    return;\r\n                }\r\n\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n\r\n                if (this.disabled || $(this).hasClass(ClassName.DISABLED)) {\r\n                    return;\r\n                }\r\n\r\n                var parent = Dropdown._getParentFromElement(this);\r\n                var isActive = $(parent).hasClass(ClassName.SHOW);\r\n\r\n                if (!isActive && event.which !== ESCAPE_KEYCODE || isActive && event.which === ESCAPE_KEYCODE) {\r\n\r\n                    if (event.which === ESCAPE_KEYCODE) {\r\n                        var toggle = $(parent).find(Selector.DATA_TOGGLE)[0];\r\n                        $(toggle).trigger('focus');\r\n                    }\r\n\r\n                    $(this).trigger('click');\r\n                    return;\r\n                }\r\n\r\n                var items = $(parent).find(Selector.VISIBLE_ITEMS).get();\r\n\r\n                if (!items.length) {\r\n                    return;\r\n                }\r\n\r\n                var index = items.indexOf(event.target);\r\n\r\n                if (event.which === ARROW_UP_KEYCODE && index > 0) {\r\n                    // up\r\n                    index--;\r\n                }\r\n\r\n                if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {\r\n                    // down\r\n                    index++;\r\n                }\r\n\r\n                if (index < 0) {\r\n                    index = 0;\r\n                }\r\n\r\n                items[index].focus();\r\n            };\r\n\r\n            _createClass(Dropdown, null, [{\r\n                key: 'VERSION',\r\n                get: function get() {\r\n                    return VERSION;\r\n                }\r\n            }]);\r\n\r\n            return Dropdown;\r\n        }();\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Data Api implementation\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $(document).on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.ROLE_MENU, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.ROLE_LISTBOX, Dropdown._dataApiKeydownHandler).on(Event.CLICK_DATA_API + ' ' + Event.FOCUSIN_DATA_API, Dropdown._clearMenus).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, Dropdown.prototype.toggle).on(Event.CLICK_DATA_API, Selector.FORM_CHILD, function (e) {\r\n            e.stopPropagation();\r\n        });\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * jQuery\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $.fn[NAME] = Dropdown._jQueryInterface;\r\n        $.fn[NAME].Constructor = Dropdown;\r\n        $.fn[NAME].noConflict = function () {\r\n            $.fn[NAME] = JQUERY_NO_CONFLICT;\r\n            return Dropdown._jQueryInterface;\r\n        };\r\n\r\n        return Dropdown;\r\n    }(jQuery);\r\n\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Bootstrap (v4.0.0-alpha.6): modal.js\r\n     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n     * --------------------------------------------------------------------------\r\n     */\r\n\r\n    var Modal = function ($) {\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Constants\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var NAME = 'modal';\r\n        var VERSION = '4.0.0-alpha.6';\r\n        var DATA_KEY = 'bs.modal';\r\n        var EVENT_KEY = '.' + DATA_KEY;\r\n        var DATA_API_KEY = '.data-api';\r\n        var JQUERY_NO_CONFLICT = $.fn[NAME];\r\n        var TRANSITION_DURATION = 300;\r\n        var BACKDROP_TRANSITION_DURATION = 150;\r\n        var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key\r\n\r\n        var Default = {\r\n            backdrop: true,\r\n            keyboard: true,\r\n            focus: true,\r\n            show: true\r\n        };\r\n\r\n        var DefaultType = {\r\n            backdrop: '(boolean|string)',\r\n            keyboard: 'boolean',\r\n            focus: 'boolean',\r\n            show: 'boolean'\r\n        };\r\n\r\n        var Event = {\r\n            HIDE: 'hide' + EVENT_KEY,\r\n            HIDDEN: 'hidden' + EVENT_KEY,\r\n            SHOW: 'show' + EVENT_KEY,\r\n            SHOWN: 'shown' + EVENT_KEY,\r\n            FOCUSIN: 'focusin' + EVENT_KEY,\r\n            RESIZE: 'resize' + EVENT_KEY,\r\n            CLICK_DISMISS: 'click.dismiss' + EVENT_KEY,\r\n            KEYDOWN_DISMISS: 'keydown.dismiss' + EVENT_KEY,\r\n            MOUSEUP_DISMISS: 'mouseup.dismiss' + EVENT_KEY,\r\n            MOUSEDOWN_DISMISS: 'mousedown.dismiss' + EVENT_KEY,\r\n            CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY\r\n        };\r\n\r\n        var ClassName = {\r\n            SCROLLBAR_MEASURER: 'modal-scrollbar-measure',\r\n            BACKDROP: 'modal-backdrop',\r\n            OPEN: 'modal-open',\r\n            FADE: 'fade',\r\n            SHOW: 'show'\r\n        };\r\n\r\n        var Selector = {\r\n            DIALOG: '.modal-dialog',\r\n            DATA_TOGGLE: '[data-toggle=\"modal\"]',\r\n            DATA_DISMISS: '[data-dismiss=\"modal\"]',\r\n            FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top'\r\n        };\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Class Definition\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var Modal = function () {\r\n            function Modal(element, config) {\r\n                _classCallCheck(this, Modal);\r\n\r\n                this._config = this._getConfig(config);\r\n                this._element = element;\r\n                this._dialog = $(element).find(Selector.DIALOG)[0];\r\n                this._backdrop = null;\r\n                this._isShown = false;\r\n                this._isBodyOverflowing = false;\r\n                this._ignoreBackdropClick = false;\r\n                this._isTransitioning = false;\r\n                this._originalBodyPadding = 0;\r\n                this._scrollbarWidth = 0;\r\n            }\r\n\r\n            // getters\r\n\r\n            // public\r\n\r\n            Modal.prototype.toggle = function toggle(relatedTarget) {\r\n                return this._isShown ? this.hide() : this.show(relatedTarget);\r\n            };\r\n\r\n            Modal.prototype.show = function show(relatedTarget) {\r\n                var _this9 = this;\r\n\r\n                if (this._isTransitioning) {\r\n                    throw new Error('Modal is transitioning');\r\n                }\r\n\r\n                if (Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE)) {\r\n                    this._isTransitioning = true;\r\n                }\r\n                var showEvent = $.Event(Event.SHOW, {\r\n                    relatedTarget: relatedTarget\r\n                });\r\n\r\n                $(this._element).trigger(showEvent);\r\n\r\n                if (this._isShown || showEvent.isDefaultPrevented()) {\r\n                    return;\r\n                }\r\n\r\n                this._isShown = true;\r\n\r\n                this._checkScrollbar();\r\n                this._setScrollbar();\r\n\r\n                $(document.body).addClass(ClassName.OPEN);\r\n\r\n                this._setEscapeEvent();\r\n                this._setResizeEvent();\r\n\r\n                $(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, function (event) {\r\n                    return _this9.hide(event);\r\n                });\r\n\r\n                $(this._dialog).on(Event.MOUSEDOWN_DISMISS, function () {\r\n                    $(_this9._element).one(Event.MOUSEUP_DISMISS, function (event) {\r\n                        if ($(event.target).is(_this9._element)) {\r\n                            _this9._ignoreBackdropClick = true;\r\n                        }\r\n                    });\r\n                });\r\n\r\n                this._showBackdrop(function () {\r\n                    return _this9._showElement(relatedTarget);\r\n                });\r\n            };\r\n\r\n            Modal.prototype.hide = function hide(event) {\r\n                var _this10 = this;\r\n\r\n                if (event) {\r\n                    event.preventDefault();\r\n                }\r\n\r\n                if (this._isTransitioning) {\r\n                    throw new Error('Modal is transitioning');\r\n                }\r\n\r\n                var transition = Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE);\r\n                if (transition) {\r\n                    this._isTransitioning = true;\r\n                }\r\n\r\n                var hideEvent = $.Event(Event.HIDE);\r\n                $(this._element).trigger(hideEvent);\r\n\r\n                if (!this._isShown || hideEvent.isDefaultPrevented()) {\r\n                    return;\r\n                }\r\n\r\n                this._isShown = false;\r\n\r\n                this._setEscapeEvent();\r\n                this._setResizeEvent();\r\n\r\n                $(document).off(Event.FOCUSIN);\r\n\r\n                $(this._element).removeClass(ClassName.SHOW);\r\n\r\n                $(this._element).off(Event.CLICK_DISMISS);\r\n                $(this._dialog).off(Event.MOUSEDOWN_DISMISS);\r\n\r\n                if (transition) {\r\n                    $(this._element).one(Util.TRANSITION_END, function (event) {\r\n                        return _this10._hideModal(event);\r\n                    }).emulateTransitionEnd(TRANSITION_DURATION);\r\n                } else {\r\n                    this._hideModal();\r\n                }\r\n            };\r\n\r\n            Modal.prototype.dispose = function dispose() {\r\n                $.removeData(this._element, DATA_KEY);\r\n\r\n                $(window, document, this._element, this._backdrop).off(EVENT_KEY);\r\n\r\n                this._config = null;\r\n                this._element = null;\r\n                this._dialog = null;\r\n                this._backdrop = null;\r\n                this._isShown = null;\r\n                this._isBodyOverflowing = null;\r\n                this._ignoreBackdropClick = null;\r\n                this._originalBodyPadding = null;\r\n                this._scrollbarWidth = null;\r\n            };\r\n\r\n            // private\r\n\r\n            Modal.prototype._getConfig = function _getConfig(config) {\r\n                config = $.extend({}, Default, config);\r\n                Util.typeCheckConfig(NAME, config, DefaultType);\r\n                return config;\r\n            };\r\n\r\n            Modal.prototype._showElement = function _showElement(relatedTarget) {\r\n                var _this11 = this;\r\n\r\n                var transition = Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE);\r\n\r\n                if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {\r\n                    // don't move modals dom position\r\n                    document.body.appendChild(this._element);\r\n                }\r\n\r\n                this._element.style.display = 'block';\r\n                this._element.removeAttribute('aria-hidden');\r\n                this._element.scrollTop = 0;\r\n\r\n                if (transition) {\r\n                    Util.reflow(this._element);\r\n                }\r\n\r\n                $(this._element).addClass(ClassName.SHOW);\r\n\r\n                if (this._config.focus) {\r\n                    this._enforceFocus();\r\n                }\r\n\r\n                var shownEvent = $.Event(Event.SHOWN, {\r\n                    relatedTarget: relatedTarget\r\n                });\r\n\r\n                var transitionComplete = function transitionComplete() {\r\n                    if (_this11._config.focus) {\r\n                        _this11._element.focus();\r\n                    }\r\n                    _this11._isTransitioning = false;\r\n                    $(_this11._element).trigger(shownEvent);\r\n                };\r\n\r\n                if (transition) {\r\n                    $(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(TRANSITION_DURATION);\r\n                } else {\r\n                    transitionComplete();\r\n                }\r\n            };\r\n\r\n            Modal.prototype._enforceFocus = function _enforceFocus() {\r\n                var _this12 = this;\r\n\r\n                $(document).off(Event.FOCUSIN) // guard against infinite focus loop\r\n                    .on(Event.FOCUSIN, function (event) {\r\n                        if (document !== event.target && _this12._element !== event.target && !$(_this12._element).has(event.target).length) {\r\n                            _this12._element.focus();\r\n                        }\r\n                    });\r\n            };\r\n\r\n            Modal.prototype._setEscapeEvent = function _setEscapeEvent() {\r\n                var _this13 = this;\r\n\r\n                if (this._isShown && this._config.keyboard) {\r\n                    $(this._element).on(Event.KEYDOWN_DISMISS, function (event) {\r\n                        if (event.which === ESCAPE_KEYCODE) {\r\n                            _this13.hide();\r\n                        }\r\n                    });\r\n                } else if (!this._isShown) {\r\n                    $(this._element).off(Event.KEYDOWN_DISMISS);\r\n                }\r\n            };\r\n\r\n            Modal.prototype._setResizeEvent = function _setResizeEvent() {\r\n                var _this14 = this;\r\n\r\n                if (this._isShown) {\r\n                    $(window).on(Event.RESIZE, function (event) {\r\n                        return _this14._handleUpdate(event);\r\n                    });\r\n                } else {\r\n                    $(window).off(Event.RESIZE);\r\n                }\r\n            };\r\n\r\n            Modal.prototype._hideModal = function _hideModal() {\r\n                var _this15 = this;\r\n\r\n                this._element.style.display = 'none';\r\n                this._element.setAttribute('aria-hidden', 'true');\r\n                this._isTransitioning = false;\r\n                this._showBackdrop(function () {\r\n                    $(document.body).removeClass(ClassName.OPEN);\r\n                    _this15._resetAdjustments();\r\n                    _this15._resetScrollbar();\r\n                    $(_this15._element).trigger(Event.HIDDEN);\r\n                });\r\n            };\r\n\r\n            Modal.prototype._removeBackdrop = function _removeBackdrop() {\r\n                if (this._backdrop) {\r\n                    $(this._backdrop).remove();\r\n                    this._backdrop = null;\r\n                }\r\n            };\r\n\r\n            Modal.prototype._showBackdrop = function _showBackdrop(callback) {\r\n                var _this16 = this;\r\n\r\n                var animate = $(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : '';\r\n\r\n                if (this._isShown && this._config.backdrop) {\r\n                    var doAnimate = Util.supportsTransitionEnd() && animate;\r\n\r\n                    this._backdrop = document.createElement('div');\r\n                    this._backdrop.className = ClassName.BACKDROP;\r\n\r\n                    if (animate) {\r\n                        $(this._backdrop).addClass(animate);\r\n                    }\r\n\r\n                    $(this._backdrop).appendTo(document.body);\r\n\r\n                    $(this._element).on(Event.CLICK_DISMISS, function (event) {\r\n                        if (_this16._ignoreBackdropClick) {\r\n                            _this16._ignoreBackdropClick = false;\r\n                            return;\r\n                        }\r\n                        if (event.target !== event.currentTarget) {\r\n                            return;\r\n                        }\r\n                        if (_this16._config.backdrop === 'static') {\r\n                            _this16._element.focus();\r\n                        } else {\r\n                            _this16.hide();\r\n                        }\r\n                    });\r\n\r\n                    if (doAnimate) {\r\n                        Util.reflow(this._backdrop);\r\n                    }\r\n\r\n                    $(this._backdrop).addClass(ClassName.SHOW);\r\n\r\n                    if (!callback) {\r\n                        return;\r\n                    }\r\n\r\n                    if (!doAnimate) {\r\n                        callback();\r\n                        return;\r\n                    }\r\n\r\n                    $(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);\r\n                } else if (!this._isShown && this._backdrop) {\r\n                    $(this._backdrop).removeClass(ClassName.SHOW);\r\n\r\n                    var callbackRemove = function callbackRemove() {\r\n                        _this16._removeBackdrop();\r\n                        if (callback) {\r\n                            callback();\r\n                        }\r\n                    };\r\n\r\n                    if (Util.supportsTransitionEnd() && $(this._element).hasClass(ClassName.FADE)) {\r\n                        $(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(BACKDROP_TRANSITION_DURATION);\r\n                    } else {\r\n                        callbackRemove();\r\n                    }\r\n                } else if (callback) {\r\n                    callback();\r\n                }\r\n            };\r\n\r\n            // ----------------------------------------------------------------------\r\n            // the following methods are used to handle overflowing modals\r\n            // todo (fat): these should probably be refactored out of modal.js\r\n            // ----------------------------------------------------------------------\r\n\r\n            Modal.prototype._handleUpdate = function _handleUpdate() {\r\n                this._adjustDialog();\r\n            };\r\n\r\n            Modal.prototype._adjustDialog = function _adjustDialog() {\r\n                var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\r\n\r\n                if (!this._isBodyOverflowing && isModalOverflowing) {\r\n                    this._element.style.paddingLeft = this._scrollbarWidth + 'px';\r\n                }\r\n\r\n                if (this._isBodyOverflowing && !isModalOverflowing) {\r\n                    this._element.style.paddingRight = this._scrollbarWidth + 'px';\r\n                }\r\n            };\r\n\r\n            Modal.prototype._resetAdjustments = function _resetAdjustments() {\r\n                this._element.style.paddingLeft = '';\r\n                this._element.style.paddingRight = '';\r\n            };\r\n\r\n            Modal.prototype._checkScrollbar = function _checkScrollbar() {\r\n                this._isBodyOverflowing = document.body.clientWidth < window.innerWidth;\r\n                this._scrollbarWidth = this._getScrollbarWidth();\r\n            };\r\n\r\n            Modal.prototype._setScrollbar = function _setScrollbar() {\r\n                var bodyPadding = parseInt($(Selector.FIXED_CONTENT).css('padding-right') || 0, 10);\r\n\r\n                this._originalBodyPadding = document.body.style.paddingRight || '';\r\n\r\n                if (this._isBodyOverflowing) {\r\n                    document.body.style.paddingRight = bodyPadding + this._scrollbarWidth + 'px';\r\n                }\r\n            };\r\n\r\n            Modal.prototype._resetScrollbar = function _resetScrollbar() {\r\n                document.body.style.paddingRight = this._originalBodyPadding;\r\n            };\r\n\r\n            Modal.prototype._getScrollbarWidth = function _getScrollbarWidth() {\r\n                // thx d.walsh\r\n                var scrollDiv = document.createElement('div');\r\n                scrollDiv.className = ClassName.SCROLLBAR_MEASURER;\r\n                document.body.appendChild(scrollDiv);\r\n                var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;\r\n                document.body.removeChild(scrollDiv);\r\n                return scrollbarWidth;\r\n            };\r\n\r\n            // static\r\n\r\n            Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {\r\n                return this.each(function () {\r\n                    var data = $(this).data(DATA_KEY);\r\n                    var _config = $.extend({}, Modal.Default, $(this).data(), (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' && config);\r\n\r\n                    if (!data) {\r\n                        data = new Modal(this, _config);\r\n                        $(this).data(DATA_KEY, data);\r\n                    }\r\n\r\n                    if (typeof config === 'string') {\r\n                        if (data[config] === undefined) {\r\n                            throw new Error('No method named \"' + config + '\"');\r\n                        }\r\n                        data[config](relatedTarget);\r\n                    } else if (_config.show) {\r\n                        data.show(relatedTarget);\r\n                    }\r\n                });\r\n            };\r\n\r\n            _createClass(Modal, null, [{\r\n                key: 'VERSION',\r\n                get: function get() {\r\n                    return VERSION;\r\n                }\r\n            }, {\r\n                key: 'Default',\r\n                get: function get() {\r\n                    return Default;\r\n                }\r\n            }]);\r\n\r\n            return Modal;\r\n        }();\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Data Api implementation\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\r\n            var _this17 = this;\r\n\r\n            var target = void 0;\r\n            var selector = Util.getSelectorFromElement(this);\r\n\r\n            if (selector) {\r\n                target = $(selector)[0];\r\n            }\r\n\r\n            var config = $(target).data(DATA_KEY) ? 'toggle' : $.extend({}, $(target).data(), $(this).data());\r\n\r\n            if (this.tagName === 'A' || this.tagName === 'AREA') {\r\n                event.preventDefault();\r\n            }\r\n\r\n            var $target = $(target).one(Event.SHOW, function (showEvent) {\r\n                if (showEvent.isDefaultPrevented()) {\r\n                    // only register focus restorer if modal will actually get shown\r\n                    return;\r\n                }\r\n\r\n                $target.one(Event.HIDDEN, function () {\r\n                    if ($(_this17).is(':visible')) {\r\n                        _this17.focus();\r\n                    }\r\n                });\r\n            });\r\n\r\n            Modal._jQueryInterface.call($(target), config, this);\r\n        });\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * jQuery\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $.fn[NAME] = Modal._jQueryInterface;\r\n        $.fn[NAME].Constructor = Modal;\r\n        $.fn[NAME].noConflict = function () {\r\n            $.fn[NAME] = JQUERY_NO_CONFLICT;\r\n            return Modal._jQueryInterface;\r\n        };\r\n\r\n        return Modal;\r\n    }(jQuery);\r\n\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Bootstrap (v4.0.0-alpha.6): scrollspy.js\r\n     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n     * --------------------------------------------------------------------------\r\n     */\r\n\r\n    var ScrollSpy = function ($) {\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Constants\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var NAME = 'scrollspy';\r\n        var VERSION = '4.0.0-alpha.6';\r\n        var DATA_KEY = 'bs.scrollspy';\r\n        var EVENT_KEY = '.' + DATA_KEY;\r\n        var DATA_API_KEY = '.data-api';\r\n        var JQUERY_NO_CONFLICT = $.fn[NAME];\r\n\r\n        var Default = {\r\n            offset: 10,\r\n            method: 'auto',\r\n            target: ''\r\n        };\r\n\r\n        var DefaultType = {\r\n            offset: 'number',\r\n            method: 'string',\r\n            target: '(string|element)'\r\n        };\r\n\r\n        var Event = {\r\n            ACTIVATE: 'activate' + EVENT_KEY,\r\n            SCROLL: 'scroll' + EVENT_KEY,\r\n            LOAD_DATA_API: 'load' + EVENT_KEY + DATA_API_KEY\r\n        };\r\n\r\n        var ClassName = {\r\n            DROPDOWN_ITEM: 'dropdown-item',\r\n            DROPDOWN_MENU: 'dropdown-menu',\r\n            NAV_LINK: 'nav-link',\r\n            NAV: 'nav',\r\n            ACTIVE: 'active'\r\n        };\r\n\r\n        var Selector = {\r\n            DATA_SPY: '[data-spy=\"scroll\"]',\r\n            ACTIVE: '.active',\r\n            LIST_ITEM: '.list-item',\r\n            LI: 'li',\r\n            LI_DROPDOWN: 'li.dropdown',\r\n            NAV_LINKS: '.nav-link',\r\n            DROPDOWN: '.dropdown',\r\n            DROPDOWN_ITEMS: '.dropdown-item',\r\n            DROPDOWN_TOGGLE: '.dropdown-toggle'\r\n        };\r\n\r\n        var OffsetMethod = {\r\n            OFFSET: 'offset',\r\n            POSITION: 'position'\r\n        };\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Class Definition\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var ScrollSpy = function () {\r\n            function ScrollSpy(element, config) {\r\n                var _this18 = this;\r\n\r\n                _classCallCheck(this, ScrollSpy);\r\n\r\n                this._element = element;\r\n                this._scrollElement = element.tagName === 'BODY' ? window : element;\r\n                this._config = this._getConfig(config);\r\n                this._selector = this._config.target + ' ' + Selector.NAV_LINKS + ',' + (this._config.target + ' ' + Selector.DROPDOWN_ITEMS);\r\n                this._offsets = [];\r\n                this._targets = [];\r\n                this._activeTarget = null;\r\n                this._scrollHeight = 0;\r\n\r\n                $(this._scrollElement).on(Event.SCROLL, function (event) {\r\n                    return _this18._process(event);\r\n                });\r\n\r\n                this.refresh();\r\n                this._process();\r\n            }\r\n\r\n            // getters\r\n\r\n            // public\r\n\r\n            ScrollSpy.prototype.refresh = function refresh() {\r\n                var _this19 = this;\r\n\r\n                var autoMethod = this._scrollElement !== this._scrollElement.window ? OffsetMethod.POSITION : OffsetMethod.OFFSET;\r\n\r\n                var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;\r\n\r\n                var offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;\r\n\r\n                this._offsets = [];\r\n                this._targets = [];\r\n\r\n                this._scrollHeight = this._getScrollHeight();\r\n\r\n                var targets = $.makeArray($(this._selector));\r\n\r\n                targets.map(function (element) {\r\n                    var target = void 0;\r\n                    var targetSelector = Util.getSelectorFromElement(element);\r\n\r\n                    if (targetSelector) {\r\n                        target = $(targetSelector)[0];\r\n                    }\r\n\r\n                    if (target && (target.offsetWidth || target.offsetHeight)) {\r\n                        // todo (fat): remove sketch reliance on jQuery position/offset\r\n                        return [$(target)[offsetMethod]().top + offsetBase, targetSelector];\r\n                    }\r\n                    return null;\r\n                }).filter(function (item) {\r\n                    return item;\r\n                }).sort(function (a, b) {\r\n                    return a[0] - b[0];\r\n                }).forEach(function (item) {\r\n                    _this19._offsets.push(item[0]);\r\n                    _this19._targets.push(item[1]);\r\n                });\r\n            };\r\n\r\n            ScrollSpy.prototype.dispose = function dispose() {\r\n                $.removeData(this._element, DATA_KEY);\r\n                $(this._scrollElement).off(EVENT_KEY);\r\n\r\n                this._element = null;\r\n                this._scrollElement = null;\r\n                this._config = null;\r\n                this._selector = null;\r\n                this._offsets = null;\r\n                this._targets = null;\r\n                this._activeTarget = null;\r\n                this._scrollHeight = null;\r\n            };\r\n\r\n            // private\r\n\r\n            ScrollSpy.prototype._getConfig = function _getConfig(config) {\r\n                config = $.extend({}, Default, config);\r\n\r\n                if (typeof config.target !== 'string') {\r\n                    var id = $(config.target).attr('id');\r\n                    if (!id) {\r\n                        id = Util.getUID(NAME);\r\n                        $(config.target).attr('id', id);\r\n                    }\r\n                    config.target = '#' + id;\r\n                }\r\n\r\n                Util.typeCheckConfig(NAME, config, DefaultType);\r\n\r\n                return config;\r\n            };\r\n\r\n            ScrollSpy.prototype._getScrollTop = function _getScrollTop() {\r\n                return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;\r\n            };\r\n\r\n            ScrollSpy.prototype._getScrollHeight = function _getScrollHeight() {\r\n                return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);\r\n            };\r\n\r\n            ScrollSpy.prototype._getOffsetHeight = function _getOffsetHeight() {\r\n                return this._scrollElement === window ? window.innerHeight : this._scrollElement.offsetHeight;\r\n            };\r\n\r\n            ScrollSpy.prototype._process = function _process() {\r\n                var scrollTop = this._getScrollTop() + this._config.offset;\r\n                var scrollHeight = this._getScrollHeight();\r\n                var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();\r\n\r\n                if (this._scrollHeight !== scrollHeight) {\r\n                    this.refresh();\r\n                }\r\n\r\n                if (scrollTop >= maxScroll) {\r\n                    var target = this._targets[this._targets.length - 1];\r\n\r\n                    if (this._activeTarget !== target) {\r\n                        this._activate(target);\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {\r\n                    this._activeTarget = null;\r\n                    this._clear();\r\n                    return;\r\n                }\r\n\r\n                for (var i = this._offsets.length; i--;) {\r\n                    var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (this._offsets[i + 1] === undefined || scrollTop < this._offsets[i + 1]);\r\n\r\n                    if (isActiveTarget) {\r\n                        this._activate(this._targets[i]);\r\n                    }\r\n                }\r\n            };\r\n\r\n            ScrollSpy.prototype._activate = function _activate(target) {\r\n                this._activeTarget = target;\r\n\r\n                this._clear();\r\n\r\n                var queries = this._selector.split(',');\r\n                queries = queries.map(function (selector) {\r\n                    return selector + '[data-target=\"' + target + '\"],' + (selector + '[href=\"' + target + '\"]');\r\n                });\r\n\r\n                var $link = $(queries.join(','));\r\n\r\n                if ($link.hasClass(ClassName.DROPDOWN_ITEM)) {\r\n                    $link.closest(Selector.DROPDOWN).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);\r\n                    $link.addClass(ClassName.ACTIVE);\r\n                } else {\r\n                    // todo (fat) this is kinda sus...\r\n                    // recursively add actives to tested nav-links\r\n                    $link.parents(Selector.LI).find('> ' + Selector.NAV_LINKS).addClass(ClassName.ACTIVE);\r\n                }\r\n\r\n                $(this._scrollElement).trigger(Event.ACTIVATE, {\r\n                    relatedTarget: target\r\n                });\r\n            };\r\n\r\n            ScrollSpy.prototype._clear = function _clear() {\r\n                $(this._selector).filter(Selector.ACTIVE).removeClass(ClassName.ACTIVE);\r\n            };\r\n\r\n            // static\r\n\r\n            ScrollSpy._jQueryInterface = function _jQueryInterface(config) {\r\n                return this.each(function () {\r\n                    var data = $(this).data(DATA_KEY);\r\n                    var _config = (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' && config;\r\n\r\n                    if (!data) {\r\n                        data = new ScrollSpy(this, _config);\r\n                        $(this).data(DATA_KEY, data);\r\n                    }\r\n\r\n                    if (typeof config === 'string') {\r\n                        if (data[config] === undefined) {\r\n                            throw new Error('No method named \"' + config + '\"');\r\n                        }\r\n                        data[config]();\r\n                    }\r\n                });\r\n            };\r\n\r\n            _createClass(ScrollSpy, null, [{\r\n                key: 'VERSION',\r\n                get: function get() {\r\n                    return VERSION;\r\n                }\r\n            }, {\r\n                key: 'Default',\r\n                get: function get() {\r\n                    return Default;\r\n                }\r\n            }]);\r\n\r\n            return ScrollSpy;\r\n        }();\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Data Api implementation\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $(window).on(Event.LOAD_DATA_API, function () {\r\n            var scrollSpys = $.makeArray($(Selector.DATA_SPY));\r\n\r\n            for (var i = scrollSpys.length; i--;) {\r\n                var $spy = $(scrollSpys[i]);\r\n                ScrollSpy._jQueryInterface.call($spy, $spy.data());\r\n            }\r\n        });\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * jQuery\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $.fn[NAME] = ScrollSpy._jQueryInterface;\r\n        $.fn[NAME].Constructor = ScrollSpy;\r\n        $.fn[NAME].noConflict = function () {\r\n            $.fn[NAME] = JQUERY_NO_CONFLICT;\r\n            return ScrollSpy._jQueryInterface;\r\n        };\r\n\r\n        return ScrollSpy;\r\n    }(jQuery);\r\n\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Bootstrap (v4.0.0-alpha.6): tab.js\r\n     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n     * --------------------------------------------------------------------------\r\n     */\r\n\r\n    var Tab = function ($) {\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Constants\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var NAME = 'tab';\r\n        var VERSION = '4.0.0-alpha.6';\r\n        var DATA_KEY = 'bs.tab';\r\n        var EVENT_KEY = '.' + DATA_KEY;\r\n        var DATA_API_KEY = '.data-api';\r\n        var JQUERY_NO_CONFLICT = $.fn[NAME];\r\n        var TRANSITION_DURATION = 150;\r\n\r\n        var Event = {\r\n            HIDE: 'hide' + EVENT_KEY,\r\n            HIDDEN: 'hidden' + EVENT_KEY,\r\n            SHOW: 'show' + EVENT_KEY,\r\n            SHOWN: 'shown' + EVENT_KEY,\r\n            CLICK_DATA_API: 'click' + EVENT_KEY + DATA_API_KEY\r\n        };\r\n\r\n        var ClassName = {\r\n            DROPDOWN_MENU: 'dropdown-menu',\r\n            ACTIVE: 'active',\r\n            DISABLED: 'disabled',\r\n            FADE: 'fade',\r\n            SHOW: 'show'\r\n        };\r\n\r\n        var Selector = {\r\n            A: 'a',\r\n            LI: 'li',\r\n            DROPDOWN: '.dropdown',\r\n            LIST: 'ul:not(.dropdown-menu), ol:not(.dropdown-menu), nav:not(.dropdown-menu)',\r\n            FADE_CHILD: '> .nav-item .fade, > .fade',\r\n            ACTIVE: '.active',\r\n            ACTIVE_CHILD: '> .nav-item > .active, > .active',\r\n            DATA_TOGGLE: '[data-toggle=\"tab\"], [data-toggle=\"pill\"]',\r\n            DROPDOWN_TOGGLE: '.dropdown-toggle',\r\n            DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'\r\n        };\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Class Definition\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var Tab = function () {\r\n            function Tab(element) {\r\n                _classCallCheck(this, Tab);\r\n\r\n                this._element = element;\r\n            }\r\n\r\n            // getters\r\n\r\n            // public\r\n\r\n            Tab.prototype.show = function show() {\r\n                var _this20 = this;\r\n\r\n                if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $(this._element).hasClass(ClassName.ACTIVE) || $(this._element).hasClass(ClassName.DISABLED)) {\r\n                    return;\r\n                }\r\n\r\n                var target = void 0;\r\n                var previous = void 0;\r\n                var listElement = $(this._element).closest(Selector.LIST)[0];\r\n                var selector = Util.getSelectorFromElement(this._element);\r\n\r\n                if (listElement) {\r\n                    previous = $.makeArray($(listElement).find(Selector.ACTIVE));\r\n                    previous = previous[previous.length - 1];\r\n                }\r\n\r\n                var hideEvent = $.Event(Event.HIDE, {\r\n                    relatedTarget: this._element\r\n                });\r\n\r\n                var showEvent = $.Event(Event.SHOW, {\r\n                    relatedTarget: previous\r\n                });\r\n\r\n                if (previous) {\r\n                    $(previous).trigger(hideEvent);\r\n                }\r\n\r\n                $(this._element).trigger(showEvent);\r\n\r\n                if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {\r\n                    return;\r\n                }\r\n\r\n                if (selector) {\r\n                    target = $(selector)[0];\r\n                }\r\n\r\n                this._activate(this._element, listElement);\r\n\r\n                var complete = function complete() {\r\n                    var hiddenEvent = $.Event(Event.HIDDEN, {\r\n                        relatedTarget: _this20._element\r\n                    });\r\n\r\n                    var shownEvent = $.Event(Event.SHOWN, {\r\n                        relatedTarget: previous\r\n                    });\r\n\r\n                    $(previous).trigger(hiddenEvent);\r\n                    $(_this20._element).trigger(shownEvent);\r\n                };\r\n\r\n                if (target) {\r\n                    this._activate(target, target.parentNode, complete);\r\n                } else {\r\n                    complete();\r\n                }\r\n            };\r\n\r\n            Tab.prototype.dispose = function dispose() {\r\n                $.removeClass(this._element, DATA_KEY);\r\n                this._element = null;\r\n            };\r\n\r\n            // private\r\n\r\n            Tab.prototype._activate = function _activate(element, container, callback) {\r\n                var _this21 = this;\r\n\r\n                var active = $(container).find(Selector.ACTIVE_CHILD)[0];\r\n                var isTransitioning = callback && Util.supportsTransitionEnd() && (active && $(active).hasClass(ClassName.FADE) || Boolean($(container).find(Selector.FADE_CHILD)[0]));\r\n\r\n                var complete = function complete() {\r\n                    return _this21._transitionComplete(element, active, isTransitioning, callback);\r\n                };\r\n\r\n                if (active && isTransitioning) {\r\n                    $(active).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);\r\n                } else {\r\n                    complete();\r\n                }\r\n\r\n                if (active) {\r\n                    $(active).removeClass(ClassName.SHOW);\r\n                }\r\n            };\r\n\r\n            Tab.prototype._transitionComplete = function _transitionComplete(element, active, isTransitioning, callback) {\r\n                if (active) {\r\n                    $(active).removeClass(ClassName.ACTIVE);\r\n\r\n                    var dropdownChild = $(active.parentNode).find(Selector.DROPDOWN_ACTIVE_CHILD)[0];\r\n\r\n                    if (dropdownChild) {\r\n                        $(dropdownChild).removeClass(ClassName.ACTIVE);\r\n                    }\r\n\r\n                    active.setAttribute('aria-expanded', false);\r\n                }\r\n\r\n                $(element).addClass(ClassName.ACTIVE);\r\n                element.setAttribute('aria-expanded', true);\r\n\r\n                if (isTransitioning) {\r\n                    Util.reflow(element);\r\n                    $(element).addClass(ClassName.SHOW);\r\n                } else {\r\n                    $(element).removeClass(ClassName.FADE);\r\n                }\r\n\r\n                if (element.parentNode && $(element.parentNode).hasClass(ClassName.DROPDOWN_MENU)) {\r\n\r\n                    var dropdownElement = $(element).closest(Selector.DROPDOWN)[0];\r\n                    if (dropdownElement) {\r\n                        $(dropdownElement).find(Selector.DROPDOWN_TOGGLE).addClass(ClassName.ACTIVE);\r\n                    }\r\n\r\n                    element.setAttribute('aria-expanded', true);\r\n                }\r\n\r\n                if (callback) {\r\n                    callback();\r\n                }\r\n            };\r\n\r\n            // static\r\n\r\n            Tab._jQueryInterface = function _jQueryInterface(config) {\r\n                return this.each(function () {\r\n                    var $this = $(this);\r\n                    var data = $this.data(DATA_KEY);\r\n\r\n                    if (!data) {\r\n                        data = new Tab(this);\r\n                        $this.data(DATA_KEY, data);\r\n                    }\r\n\r\n                    if (typeof config === 'string') {\r\n                        if (data[config] === undefined) {\r\n                            throw new Error('No method named \"' + config + '\"');\r\n                        }\r\n                        data[config]();\r\n                    }\r\n                });\r\n            };\r\n\r\n            _createClass(Tab, null, [{\r\n                key: 'VERSION',\r\n                get: function get() {\r\n                    return VERSION;\r\n                }\r\n            }]);\r\n\r\n            return Tab;\r\n        }();\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Data Api implementation\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\r\n            event.preventDefault();\r\n            Tab._jQueryInterface.call($(this), 'show');\r\n        });\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * jQuery\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $.fn[NAME] = Tab._jQueryInterface;\r\n        $.fn[NAME].Constructor = Tab;\r\n        $.fn[NAME].noConflict = function () {\r\n            $.fn[NAME] = JQUERY_NO_CONFLICT;\r\n            return Tab._jQueryInterface;\r\n        };\r\n\r\n        return Tab;\r\n    }(jQuery);\r\n\r\n    /* global Tether */\r\n\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Bootstrap (v4.0.0-alpha.6): tooltip.js\r\n     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n     * --------------------------------------------------------------------------\r\n     */\r\n\r\n    var Tooltip = function ($) {\r\n\r\n        /**\r\n         * Check for Tether dependency\r\n         * Tether - http://tether.io/\r\n         */\r\n        if (typeof Tether === 'undefined') {\r\n            throw new Error('Bootstrap tooltips require Tether (http://tether.io/)');\r\n        }\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Constants\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var NAME = 'tooltip';\r\n        var VERSION = '4.0.0-alpha.6';\r\n        var DATA_KEY = 'bs.tooltip';\r\n        var EVENT_KEY = '.' + DATA_KEY;\r\n        var JQUERY_NO_CONFLICT = $.fn[NAME];\r\n        var TRANSITION_DURATION = 150;\r\n        var CLASS_PREFIX = 'bs-tether';\r\n\r\n        var Default = {\r\n            animation: true,\r\n            template: '<div class=\"tooltip\" role=\"tooltip\">' + '<div class=\"tooltip-inner\"></div></div>',\r\n            trigger: 'hover focus',\r\n            title: '',\r\n            delay: 0,\r\n            html: false,\r\n            selector: false,\r\n            placement: 'top',\r\n            offset: '0 0',\r\n            constraints: [],\r\n            container: false\r\n        };\r\n\r\n        var DefaultType = {\r\n            animation: 'boolean',\r\n            template: 'string',\r\n            title: '(string|element|function)',\r\n            trigger: 'string',\r\n            delay: '(number|object)',\r\n            html: 'boolean',\r\n            selector: '(string|boolean)',\r\n            placement: '(string|function)',\r\n            offset: 'string',\r\n            constraints: 'array',\r\n            container: '(string|element|boolean)'\r\n        };\r\n\r\n        var AttachmentMap = {\r\n            TOP: 'bottom center',\r\n            RIGHT: 'middle left',\r\n            BOTTOM: 'top center',\r\n            LEFT: 'middle right'\r\n        };\r\n\r\n        var HoverState = {\r\n            SHOW: 'show',\r\n            OUT: 'out'\r\n        };\r\n\r\n        var Event = {\r\n            HIDE: 'hide' + EVENT_KEY,\r\n            HIDDEN: 'hidden' + EVENT_KEY,\r\n            SHOW: 'show' + EVENT_KEY,\r\n            SHOWN: 'shown' + EVENT_KEY,\r\n            INSERTED: 'inserted' + EVENT_KEY,\r\n            CLICK: 'click' + EVENT_KEY,\r\n            FOCUSIN: 'focusin' + EVENT_KEY,\r\n            FOCUSOUT: 'focusout' + EVENT_KEY,\r\n            MOUSEENTER: 'mouseenter' + EVENT_KEY,\r\n            MOUSELEAVE: 'mouseleave' + EVENT_KEY\r\n        };\r\n\r\n        var ClassName = {\r\n            FADE: 'fade',\r\n            SHOW: 'show'\r\n        };\r\n\r\n        var Selector = {\r\n            TOOLTIP: '.tooltip',\r\n            TOOLTIP_INNER: '.tooltip-inner'\r\n        };\r\n\r\n        var TetherClass = {\r\n            element: false,\r\n            enabled: false\r\n        };\r\n\r\n        var Trigger = {\r\n            HOVER: 'hover',\r\n            FOCUS: 'focus',\r\n            CLICK: 'click',\r\n            MANUAL: 'manual'\r\n        };\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Class Definition\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var Tooltip = function () {\r\n            function Tooltip(element, config) {\r\n                _classCallCheck(this, Tooltip);\r\n\r\n                // private\r\n                this._isEnabled = true;\r\n                this._timeout = 0;\r\n                this._hoverState = '';\r\n                this._activeTrigger = {};\r\n                this._isTransitioning = false;\r\n                this._tether = null;\r\n\r\n                // protected\r\n                this.element = element;\r\n                this.config = this._getConfig(config);\r\n                this.tip = null;\r\n\r\n                this._setListeners();\r\n            }\r\n\r\n            // getters\r\n\r\n            // public\r\n\r\n            Tooltip.prototype.enable = function enable() {\r\n                this._isEnabled = true;\r\n            };\r\n\r\n            Tooltip.prototype.disable = function disable() {\r\n                this._isEnabled = false;\r\n            };\r\n\r\n            Tooltip.prototype.toggleEnabled = function toggleEnabled() {\r\n                this._isEnabled = !this._isEnabled;\r\n            };\r\n\r\n            Tooltip.prototype.toggle = function toggle(event) {\r\n                if (event) {\r\n                    var dataKey = this.constructor.DATA_KEY;\r\n                    var context = $(event.currentTarget).data(dataKey);\r\n\r\n                    if (!context) {\r\n                        context = new this.constructor(event.currentTarget, this._getDelegateConfig());\r\n                        $(event.currentTarget).data(dataKey, context);\r\n                    }\r\n\r\n                    context._activeTrigger.click = !context._activeTrigger.click;\r\n\r\n                    if (context._isWithActiveTrigger()) {\r\n                        context._enter(null, context);\r\n                    } else {\r\n                        context._leave(null, context);\r\n                    }\r\n                } else {\r\n\r\n                    if ($(this.getTipElement()).hasClass(ClassName.SHOW)) {\r\n                        this._leave(null, this);\r\n                        return;\r\n                    }\r\n\r\n                    this._enter(null, this);\r\n                }\r\n            };\r\n\r\n            Tooltip.prototype.dispose = function dispose() {\r\n                clearTimeout(this._timeout);\r\n\r\n                this.cleanupTether();\r\n\r\n                $.removeData(this.element, this.constructor.DATA_KEY);\r\n\r\n                $(this.element).off(this.constructor.EVENT_KEY);\r\n                $(this.element).closest('.modal').off('hide.bs.modal');\r\n\r\n                if (this.tip) {\r\n                    $(this.tip).remove();\r\n                }\r\n\r\n                this._isEnabled = null;\r\n                this._timeout = null;\r\n                this._hoverState = null;\r\n                this._activeTrigger = null;\r\n                this._tether = null;\r\n\r\n                this.element = null;\r\n                this.config = null;\r\n                this.tip = null;\r\n            };\r\n\r\n            Tooltip.prototype.show = function show() {\r\n                var _this22 = this;\r\n\r\n                if ($(this.element).css('display') === 'none') {\r\n                    throw new Error('Please use show on visible elements');\r\n                }\r\n\r\n                var showEvent = $.Event(this.constructor.Event.SHOW);\r\n                if (this.isWithContent() && this._isEnabled) {\r\n                    if (this._isTransitioning) {\r\n                        throw new Error('Tooltip is transitioning');\r\n                    }\r\n                    $(this.element).trigger(showEvent);\r\n\r\n                    var isInTheDom = $.contains(this.element.ownerDocument.documentElement, this.element);\r\n\r\n                    if (showEvent.isDefaultPrevented() || !isInTheDom) {\r\n                        return;\r\n                    }\r\n\r\n                    var tip = this.getTipElement();\r\n                    var tipId = Util.getUID(this.constructor.NAME);\r\n\r\n                    tip.setAttribute('id', tipId);\r\n                    this.element.setAttribute('aria-describedby', tipId);\r\n\r\n                    this.setContent();\r\n\r\n                    if (this.config.animation) {\r\n                        $(tip).addClass(ClassName.FADE);\r\n                    }\r\n\r\n                    var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;\r\n\r\n                    var attachment = this._getAttachment(placement);\r\n\r\n                    var container = this.config.container === false ? document.body : $(this.config.container);\r\n\r\n                    $(tip).data(this.constructor.DATA_KEY, this).appendTo(container);\r\n\r\n                    $(this.element).trigger(this.constructor.Event.INSERTED);\r\n\r\n                    this._tether = new Tether({\r\n                        attachment: attachment,\r\n                        element: tip,\r\n                        target: this.element,\r\n                        classes: TetherClass,\r\n                        classPrefix: CLASS_PREFIX,\r\n                        offset: this.config.offset,\r\n                        constraints: this.config.constraints,\r\n                        addTargetClasses: false\r\n                    });\r\n\r\n                    Util.reflow(tip);\r\n                    this._tether.position();\r\n\r\n                    $(tip).addClass(ClassName.SHOW);\r\n\r\n                    var complete = function complete() {\r\n                        var prevHoverState = _this22._hoverState;\r\n                        _this22._hoverState = null;\r\n                        _this22._isTransitioning = false;\r\n\r\n                        $(_this22.element).trigger(_this22.constructor.Event.SHOWN);\r\n\r\n                        if (prevHoverState === HoverState.OUT) {\r\n                            _this22._leave(null, _this22);\r\n                        }\r\n                    };\r\n\r\n                    if (Util.supportsTransitionEnd() && $(this.tip).hasClass(ClassName.FADE)) {\r\n                        this._isTransitioning = true;\r\n                        $(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(Tooltip._TRANSITION_DURATION);\r\n                        return;\r\n                    }\r\n\r\n                    complete();\r\n                }\r\n            };\r\n\r\n            Tooltip.prototype.hide = function hide(callback) {\r\n                var _this23 = this;\r\n\r\n                var tip = this.getTipElement();\r\n                var hideEvent = $.Event(this.constructor.Event.HIDE);\r\n                if (this._isTransitioning) {\r\n                    throw new Error('Tooltip is transitioning');\r\n                }\r\n                var complete = function complete() {\r\n                    if (_this23._hoverState !== HoverState.SHOW && tip.parentNode) {\r\n                        tip.parentNode.removeChild(tip);\r\n                    }\r\n\r\n                    _this23.element.removeAttribute('aria-describedby');\r\n                    $(_this23.element).trigger(_this23.constructor.Event.HIDDEN);\r\n                    _this23._isTransitioning = false;\r\n                    _this23.cleanupTether();\r\n\r\n                    if (callback) {\r\n                        callback();\r\n                    }\r\n                };\r\n\r\n                $(this.element).trigger(hideEvent);\r\n\r\n                if (hideEvent.isDefaultPrevented()) {\r\n                    return;\r\n                }\r\n\r\n                $(tip).removeClass(ClassName.SHOW);\r\n\r\n                this._activeTrigger[Trigger.CLICK] = false;\r\n                this._activeTrigger[Trigger.FOCUS] = false;\r\n                this._activeTrigger[Trigger.HOVER] = false;\r\n\r\n                if (Util.supportsTransitionEnd() && $(this.tip).hasClass(ClassName.FADE)) {\r\n                    this._isTransitioning = true;\r\n                    $(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(TRANSITION_DURATION);\r\n                } else {\r\n                    complete();\r\n                }\r\n\r\n                this._hoverState = '';\r\n            };\r\n\r\n            // protected\r\n\r\n            Tooltip.prototype.isWithContent = function isWithContent() {\r\n                return Boolean(this.getTitle());\r\n            };\r\n\r\n            Tooltip.prototype.getTipElement = function getTipElement() {\r\n                return this.tip = this.tip || $(this.config.template)[0];\r\n            };\r\n\r\n            Tooltip.prototype.setContent = function setContent() {\r\n                var $tip = $(this.getTipElement());\r\n\r\n                this.setElementContent($tip.find(Selector.TOOLTIP_INNER), this.getTitle());\r\n\r\n                $tip.removeClass(ClassName.FADE + ' ' + ClassName.SHOW);\r\n\r\n                this.cleanupTether();\r\n            };\r\n\r\n            Tooltip.prototype.setElementContent = function setElementContent($element, content) {\r\n                var html = this.config.html;\r\n                if ((typeof content === 'undefined' ? 'undefined' : _typeof(content)) === 'object' && (content.nodeType || content.jquery)) {\r\n                    // content is a DOM node or a jQuery\r\n                    if (html) {\r\n                        if (!$(content).parent().is($element)) {\r\n                            $element.empty().append(content);\r\n                        }\r\n                    } else {\r\n                        $element.text($(content).text());\r\n                    }\r\n                } else {\r\n                    $element[html ? 'html' : 'text'](content);\r\n                }\r\n            };\r\n\r\n            Tooltip.prototype.getTitle = function getTitle() {\r\n                var title = this.element.getAttribute('data-original-title');\r\n\r\n                if (!title) {\r\n                    title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;\r\n                }\r\n\r\n                return title;\r\n            };\r\n\r\n            Tooltip.prototype.cleanupTether = function cleanupTether() {\r\n                if (this._tether) {\r\n                    this._tether.destroy();\r\n                }\r\n            };\r\n\r\n            // private\r\n\r\n            Tooltip.prototype._getAttachment = function _getAttachment(placement) {\r\n                return AttachmentMap[placement.toUpperCase()];\r\n            };\r\n\r\n            Tooltip.prototype._setListeners = function _setListeners() {\r\n                var _this24 = this;\r\n\r\n                var triggers = this.config.trigger.split(' ');\r\n\r\n                triggers.forEach(function (trigger) {\r\n                    if (trigger === 'click') {\r\n                        $(_this24.element).on(_this24.constructor.Event.CLICK, _this24.config.selector, function (event) {\r\n                            return _this24.toggle(event);\r\n                        });\r\n                    } else if (trigger !== Trigger.MANUAL) {\r\n                        var eventIn = trigger === Trigger.HOVER ? _this24.constructor.Event.MOUSEENTER : _this24.constructor.Event.FOCUSIN;\r\n                        var eventOut = trigger === Trigger.HOVER ? _this24.constructor.Event.MOUSELEAVE : _this24.constructor.Event.FOCUSOUT;\r\n\r\n                        $(_this24.element).on(eventIn, _this24.config.selector, function (event) {\r\n                            return _this24._enter(event);\r\n                        }).on(eventOut, _this24.config.selector, function (event) {\r\n                            return _this24._leave(event);\r\n                        });\r\n                    }\r\n\r\n                    $(_this24.element).closest('.modal').on('hide.bs.modal', function () {\r\n                        return _this24.hide();\r\n                    });\r\n                });\r\n\r\n                if (this.config.selector) {\r\n                    this.config = $.extend({}, this.config, {\r\n                        trigger: 'manual',\r\n                        selector: ''\r\n                    });\r\n                } else {\r\n                    this._fixTitle();\r\n                }\r\n            };\r\n\r\n            Tooltip.prototype._fixTitle = function _fixTitle() {\r\n                var titleType = _typeof(this.element.getAttribute('data-original-title'));\r\n                if (this.element.getAttribute('title') || titleType !== 'string') {\r\n                    this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');\r\n                    this.element.setAttribute('title', '');\r\n                }\r\n            };\r\n\r\n            Tooltip.prototype._enter = function _enter(event, context) {\r\n                var dataKey = this.constructor.DATA_KEY;\r\n\r\n                context = context || $(event.currentTarget).data(dataKey);\r\n\r\n                if (!context) {\r\n                    context = new this.constructor(event.currentTarget, this._getDelegateConfig());\r\n                    $(event.currentTarget).data(dataKey, context);\r\n                }\r\n\r\n                if (event) {\r\n                    context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;\r\n                }\r\n\r\n                if ($(context.getTipElement()).hasClass(ClassName.SHOW) || context._hoverState === HoverState.SHOW) {\r\n                    context._hoverState = HoverState.SHOW;\r\n                    return;\r\n                }\r\n\r\n                clearTimeout(context._timeout);\r\n\r\n                context._hoverState = HoverState.SHOW;\r\n\r\n                if (!context.config.delay || !context.config.delay.show) {\r\n                    context.show();\r\n                    return;\r\n                }\r\n\r\n                context._timeout = setTimeout(function () {\r\n                    if (context._hoverState === HoverState.SHOW) {\r\n                        context.show();\r\n                    }\r\n                }, context.config.delay.show);\r\n            };\r\n\r\n            Tooltip.prototype._leave = function _leave(event, context) {\r\n                var dataKey = this.constructor.DATA_KEY;\r\n\r\n                context = context || $(event.currentTarget).data(dataKey);\r\n\r\n                if (!context) {\r\n                    context = new this.constructor(event.currentTarget, this._getDelegateConfig());\r\n                    $(event.currentTarget).data(dataKey, context);\r\n                }\r\n\r\n                if (event) {\r\n                    context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;\r\n                }\r\n\r\n                if (context._isWithActiveTrigger()) {\r\n                    return;\r\n                }\r\n\r\n                clearTimeout(context._timeout);\r\n\r\n                context._hoverState = HoverState.OUT;\r\n\r\n                if (!context.config.delay || !context.config.delay.hide) {\r\n                    context.hide();\r\n                    return;\r\n                }\r\n\r\n                context._timeout = setTimeout(function () {\r\n                    if (context._hoverState === HoverState.OUT) {\r\n                        context.hide();\r\n                    }\r\n                }, context.config.delay.hide);\r\n            };\r\n\r\n            Tooltip.prototype._isWithActiveTrigger = function _isWithActiveTrigger() {\r\n                for (var trigger in this._activeTrigger) {\r\n                    if (this._activeTrigger[trigger]) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            };\r\n\r\n            Tooltip.prototype._getConfig = function _getConfig(config) {\r\n                config = $.extend({}, this.constructor.Default, $(this.element).data(), config);\r\n\r\n                if (config.delay && typeof config.delay === 'number') {\r\n                    config.delay = {\r\n                        show: config.delay,\r\n                        hide: config.delay\r\n                    };\r\n                }\r\n\r\n                Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);\r\n\r\n                return config;\r\n            };\r\n\r\n            Tooltip.prototype._getDelegateConfig = function _getDelegateConfig() {\r\n                var config = {};\r\n\r\n                if (this.config) {\r\n                    for (var key in this.config) {\r\n                        if (this.constructor.Default[key] !== this.config[key]) {\r\n                            config[key] = this.config[key];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return config;\r\n            };\r\n\r\n            // static\r\n\r\n            Tooltip._jQueryInterface = function _jQueryInterface(config) {\r\n                return this.each(function () {\r\n                    var data = $(this).data(DATA_KEY);\r\n                    var _config = (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' && config;\r\n\r\n                    if (!data && /dispose|hide/.test(config)) {\r\n                        return;\r\n                    }\r\n\r\n                    if (!data) {\r\n                        data = new Tooltip(this, _config);\r\n                        $(this).data(DATA_KEY, data);\r\n                    }\r\n\r\n                    if (typeof config === 'string') {\r\n                        if (data[config] === undefined) {\r\n                            throw new Error('No method named \"' + config + '\"');\r\n                        }\r\n                        data[config]();\r\n                    }\r\n                });\r\n            };\r\n\r\n            _createClass(Tooltip, null, [{\r\n                key: 'VERSION',\r\n                get: function get() {\r\n                    return VERSION;\r\n                }\r\n            }, {\r\n                key: 'Default',\r\n                get: function get() {\r\n                    return Default;\r\n                }\r\n            }, {\r\n                key: 'NAME',\r\n                get: function get() {\r\n                    return NAME;\r\n                }\r\n            }, {\r\n                key: 'DATA_KEY',\r\n                get: function get() {\r\n                    return DATA_KEY;\r\n                }\r\n            }, {\r\n                key: 'Event',\r\n                get: function get() {\r\n                    return Event;\r\n                }\r\n            }, {\r\n                key: 'EVENT_KEY',\r\n                get: function get() {\r\n                    return EVENT_KEY;\r\n                }\r\n            }, {\r\n                key: 'DefaultType',\r\n                get: function get() {\r\n                    return DefaultType;\r\n                }\r\n            }]);\r\n\r\n            return Tooltip;\r\n        }();\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * jQuery\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $.fn[NAME] = Tooltip._jQueryInterface;\r\n        $.fn[NAME].Constructor = Tooltip;\r\n        $.fn[NAME].noConflict = function () {\r\n            $.fn[NAME] = JQUERY_NO_CONFLICT;\r\n            return Tooltip._jQueryInterface;\r\n        };\r\n\r\n        return Tooltip;\r\n    }(jQuery);\r\n\r\n    /**\r\n     * --------------------------------------------------------------------------\r\n     * Bootstrap (v4.0.0-alpha.6): popover.js\r\n     * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\r\n     * --------------------------------------------------------------------------\r\n     */\r\n\r\n    var Popover = function ($) {\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Constants\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var NAME = 'popover';\r\n        var VERSION = '4.0.0-alpha.6';\r\n        var DATA_KEY = 'bs.popover';\r\n        var EVENT_KEY = '.' + DATA_KEY;\r\n        var JQUERY_NO_CONFLICT = $.fn[NAME];\r\n\r\n        var Default = $.extend({}, Tooltip.Default, {\r\n            placement: 'right',\r\n            trigger: 'click',\r\n            content: '',\r\n            template: '<div class=\"popover\" role=\"tooltip\">' + '<h3 class=\"popover-title\"></h3>' + '<div class=\"popover-content\"></div></div>'\r\n        });\r\n\r\n        var DefaultType = $.extend({}, Tooltip.DefaultType, {\r\n            content: '(string|element|function)'\r\n        });\r\n\r\n        var ClassName = {\r\n            FADE: 'fade',\r\n            SHOW: 'show'\r\n        };\r\n\r\n        var Selector = {\r\n            TITLE: '.popover-title',\r\n            CONTENT: '.popover-content'\r\n        };\r\n\r\n        var Event = {\r\n            HIDE: 'hide' + EVENT_KEY,\r\n            HIDDEN: 'hidden' + EVENT_KEY,\r\n            SHOW: 'show' + EVENT_KEY,\r\n            SHOWN: 'shown' + EVENT_KEY,\r\n            INSERTED: 'inserted' + EVENT_KEY,\r\n            CLICK: 'click' + EVENT_KEY,\r\n            FOCUSIN: 'focusin' + EVENT_KEY,\r\n            FOCUSOUT: 'focusout' + EVENT_KEY,\r\n            MOUSEENTER: 'mouseenter' + EVENT_KEY,\r\n            MOUSELEAVE: 'mouseleave' + EVENT_KEY\r\n        };\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * Class Definition\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        var Popover = function (_Tooltip) {\r\n            _inherits(Popover, _Tooltip);\r\n\r\n            function Popover() {\r\n                _classCallCheck(this, Popover);\r\n\r\n                return _possibleConstructorReturn(this, _Tooltip.apply(this, arguments));\r\n            }\r\n\r\n            // overrides\r\n\r\n            Popover.prototype.isWithContent = function isWithContent() {\r\n                return this.getTitle() || this._getContent();\r\n            };\r\n\r\n            Popover.prototype.getTipElement = function getTipElement() {\r\n                return this.tip = this.tip || $(this.config.template)[0];\r\n            };\r\n\r\n            Popover.prototype.setContent = function setContent() {\r\n                var $tip = $(this.getTipElement());\r\n\r\n                // we use append for html objects to maintain js events\r\n                this.setElementContent($tip.find(Selector.TITLE), this.getTitle());\r\n                this.setElementContent($tip.find(Selector.CONTENT), this._getContent());\r\n\r\n                $tip.removeClass(ClassName.FADE + ' ' + ClassName.SHOW);\r\n\r\n                this.cleanupTether();\r\n            };\r\n\r\n            // private\r\n\r\n            Popover.prototype._getContent = function _getContent() {\r\n                return this.element.getAttribute('data-content') || (typeof this.config.content === 'function' ? this.config.content.call(this.element) : this.config.content);\r\n            };\r\n\r\n            // static\r\n\r\n            Popover._jQueryInterface = function _jQueryInterface(config) {\r\n                return this.each(function () {\r\n                    var data = $(this).data(DATA_KEY);\r\n                    var _config = (typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' ? config : null;\r\n\r\n                    if (!data && /destroy|hide/.test(config)) {\r\n                        return;\r\n                    }\r\n\r\n                    if (!data) {\r\n                        data = new Popover(this, _config);\r\n                        $(this).data(DATA_KEY, data);\r\n                    }\r\n\r\n                    if (typeof config === 'string') {\r\n                        if (data[config] === undefined) {\r\n                            throw new Error('No method named \"' + config + '\"');\r\n                        }\r\n                        data[config]();\r\n                    }\r\n                });\r\n            };\r\n\r\n            _createClass(Popover, null, [{\r\n                key: 'VERSION',\r\n\r\n\r\n                // getters\r\n\r\n                get: function get() {\r\n                    return VERSION;\r\n                }\r\n            }, {\r\n                key: 'Default',\r\n                get: function get() {\r\n                    return Default;\r\n                }\r\n            }, {\r\n                key: 'NAME',\r\n                get: function get() {\r\n                    return NAME;\r\n                }\r\n            }, {\r\n                key: 'DATA_KEY',\r\n                get: function get() {\r\n                    return DATA_KEY;\r\n                }\r\n            }, {\r\n                key: 'Event',\r\n                get: function get() {\r\n                    return Event;\r\n                }\r\n            }, {\r\n                key: 'EVENT_KEY',\r\n                get: function get() {\r\n                    return EVENT_KEY;\r\n                }\r\n            }, {\r\n                key: 'DefaultType',\r\n                get: function get() {\r\n                    return DefaultType;\r\n                }\r\n            }]);\r\n\r\n            return Popover;\r\n        }(Tooltip);\r\n\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * jQuery\r\n         * ------------------------------------------------------------------------\r\n         */\r\n\r\n        $.fn[NAME] = Popover._jQueryInterface;\r\n        $.fn[NAME].Constructor = Popover;\r\n        $.fn[NAME].noConflict = function () {\r\n            $.fn[NAME] = JQUERY_NO_CONFLICT;\r\n            return Popover._jQueryInterface;\r\n        };\r\n\r\n        return Popover;\r\n    }(jQuery);\r\n\r\n}();\r\n"],"file":"bootstrap.js"}